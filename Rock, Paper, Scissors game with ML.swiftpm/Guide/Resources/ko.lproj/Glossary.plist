<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>알파(투명) 또는 *알파 채널* 값은 색상의 불투명도를 말합니다. `0`은 완전히 투명한 상태이며 `1`은 완전히 불투명한 상태입니다. 이 알파 데이터는 0과 1 사이의 Double(소수점) 값입니다.</string>
				<key>Title</key>
				<string>알파(투명)</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`true(참)` 또는 `false(거짓)` 값을 가지는 유형입니다. 예를 들어, `9 &lt; 7`은 `false(거짓)`라는 불리언 값을 반환됩니다. `9`는 `7`보다 작지 않기 때문이죠.
```
var isRunning = false
```</string>
				<key>Title</key>
				<string>불리언</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>3.14와 같이 소수점이 있는 숫자를 저장하는 유형입니다.</string>
				<key>Title</key>
				<string>Double</string>
			</dict>
		</dict>
		<key>ForEach</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터(예: 배열)의 [모음](glossary://collection)을 [반복](glossary://iteration)하여 모음의 각 요소에 대한 보기를 생성하는 구조입니다. 

`ForEach` 구조에서는 각 요소가 `ForEach` [이니셜라이저](glossary://initialization)에서 명시적으로 또는 `Identifiable` 프로토콜을 준수하여 `id`를 제공해야 합니다. 이를 통해 SwiftUI는 `ForEach`에서 생성된 각 보기를 서로 독립적으로 식별하고 업데이트할 수 있습니다.

```
ForEach(symbols) { symbol in 
    Text(symbol.name)
}
```
</string>
				<key>Title</key>
				<string>ForEach</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`10` 또는 `-42`와 같은 정수를 저장하는 유형입니다.</string>
				<key>Title</key>
				<string>Int</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`"헬로우 월드"` 또는 `"춤추는 고양이"`와 같은 일련의 문자를 저장하는 유형입니다.</string>
				<key>Title</key>
				<string>String</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Apple의 프로그래밍 언어로서 iPhone, iPad, Mac, Apple Watch, Apple TV용 앱을 만드는 데 사용됩니다.</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI는 모든 Apple 플랫폼에서 사용자 인터페이스를 선언하는 혁신적인 방법입니다. SwiftUI는 사용자가 앱의 사용자 인터페이스를 선언할 수 있도록 보기, 제어 및 레이아웃 구조를 제공합니다. 이 프레임워크는 탭, 제스처 및 그 외 유형의 입력을 앱에 전달하는 이벤트 핸들러와 앱 모델에서 사용자가 보고 상호 작용할 보기 및 제어에 이르기까지 데이터 플로우를 관리하는 도구를 제공합니다.</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>부호가 없는 값을 가진 수입니다. 예를 들어, -12의 절대값은 12고 23.4의 절대값은 23.4입니다.</string>
				<key>Title</key>
				<string>절대값</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>더 복잡한 객체의 단순화 버전입니다.   추상화는 세부 사항을 가려서 더욱 쉽게 코드를 생각하고 결합할 수 있게 해줍니다.   예를 들어, [유형](glossary://type)은 해당 유형의 인스턴스에 있는 설정, 속성 및 메소드를 가리는 추상화입니다.</string>
				<key>Title</key>
				<string>추상화</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자 기기의 가속도를 상하, 전후, 좌우의 3차원으로 측정하는 센서입니다.

기기가 가로 화면 방향인 상태로 평평한 곳에 놓여 있을 경우 상하 움직임은 z축의 가속도를, 좌우 움직임은 y축의 가속도를, 전후 움직임은 x축의 가속도를 측정합니다.</string>
				<key>Title</key>
				<string>가속도계</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프로토콜을 채택하기 위해 유형은 열거형 메소드 및 속성과 같은 프로토콜 요구사항을 위한 구현 세트를 제공합니다.</string>
				<key>Title</key>
				<string>채택</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>문제 해결을 위한 단계별 지침 또는 규칙 세트입니다. 예를 들어, 차 한 잔을 끓이는 단계도 알고리즘이라 할 수 있죠.</string>
				<key>Title</key>
				<string>알고리즘</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>항목의 마지막에 원하는 항목을 추가합니다. 예를 들어, 문자열의 끝에 문자열 하나를 추가하거나 항목의 배열에 항목 하나를 추가할 수 있습니다.
</string>
				<key>Title</key>
				<string>추가</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드로 구성된 소프트웨어로 특정 작업을 수행할 수 있습니다. 예를 들어 메시지 응용 프로그램(앱)을 사용하면 메시지를 주고 받을 수 있습니다.</string>
				<key>Title</key>
				<string>응용 프로그램</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수에 전달되어 함수의 동작을 수정하는 입력 값입니다. 예를 들어, `move(distance: 3)`이라는 함수에서 숫자 `3`은 움직여야하는 공간을 지정하는 인수입니다.</string>
				<key>Title</key>
				<string>인수</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>한 개 이상의 숫자에 기본적인 사칙 연산을 수행하는 `+`, `-`, `*`, `/`와 같은 기호입니다. 예를 들어, `42 / 7`과 `17 - 5`는 산술 연산자를 사용하고 있습니다.</string>
				<key>Title</key>
				<string>산술 연산자</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>동일한 유형의 항목을 순서대로 정리한 목록을 저장하는 모음입니다. 같은 항목은 다른 위치에 여러 번 나타날 수 있습니다.

아래 코드에서 `highScores`는 [정수](glossary://Int)의 배열이고 `greetings`은 [문자열(String)](glossary://String)의 배열입니다.
동일한 유형의 항목을 순서대로 정리한 목록을 저장하는 모음입니다. 같은 항목은 다른 위치에 여러 번 나타날 수 있습니다.

아래 코드에서 `highScores`는 [정수](glossary://Int)의 배열이고 `greetings`은 [문자열(String)](glossary://String)의 배열입니다.
```
let highScores = [37, 34, 29, 29, 26]
let greetings = ["hi", "bye", "good day"]
```</string>
				<key>Title</key>
				<string>배열</string>
			</dict>
		</dict>
		<key>aspect ratio</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>이미지 또는 화면의 너비와 높이의 비율입니다.

예를 들어 영상비가 2:1인 이미지의 너비는 높이의 두 배입니다. 영상비가 1:1인 이미지는 너비와 높이가 동일합니다.</string>
				<key>Title</key>
				<string>영상비</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>항목은 사용자 앱에서 사용되는 이미지, 사운드 및 그 외 아이템입니다. 파일 및 사진 앱과 같은 다른 앱의 항목을 Swift Playgrounds로 가져올 수 있습니다.</string>
				<key>Title</key>
				<string>항목</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>변수 또는 상수의 값을 설정하는 동작입니다.</string>
				<key>Title</key>
				<string>할당</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`=` 기호는 변수 값을 설정하는 데 사용됩니다. 예를 들어, `greeting = "hello"`는 `greeting`의 값을 `"hello"`로 설정합니다.</string>
				<key>Title</key>
				<string>할당 연산자</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱 또는 프로그램의 나머지 부분이 실행되는 동안 실행될 수 있는 코드 블록입니다. 완료될 때까지 프로그램 실행을 차단하는 동기식 프로세스와는 달리, 비동기식 프로세스는 앱 코드의 나머지 부분과 동시에 실행될 수 있습니다.</string>
				<key>Title</key>
				<string>비동기 프로세스</string>
			</dict>
		</dict>
		<key>asynchronous stream</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[시퀀스](glossary://sequence)의 값은 한 번에 모두 사용할 수 있는 것은 아니지만, 시간 간격을 두고 값 스트림으로 생성합니다. 비동기 스트림을 반복하려면 각각의 새로운 값에 대한 작업을 수행하기 해당 값을 기다려야 합니다.
				
비동기 스트림은 지진이나 비디오 프레임과 같이 시간 간격을 두고 수신되는 데이터에 자주 사용됩니다.</string>
				<key>Title</key>
				<string>비동기 스트림</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터를 저장하는 속성과 데이터를 표시하고 변경하는 보기 간에 양방향 연결을 생성하려면 `@Binding` [속성 래퍼](glossary://property%20wrapper)를 추가하세요. 바인딩은 데이터를 직접 저장하는 대신 속성을 다른 곳에 저장된 진실 공급원(SOT)에 연결합니다. 

예를 들어, 재생과 일시 정지를 토글하는 버튼은 `@Binding` 속성 래퍼를 사용하여 [컨테이너 보기](glossary://container)의 속성에 대한 바인딩을 생성할 수 있습니다.
</string>
				<key>Title</key>
				<string>바인딩</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[보기](glossary://view)의 본문은 Swift가 제공하는 하나 이상의 [기본 제공 보기](glossary://built-in%20view)로 구성된 보기 콘텐츠를 제공하는 곳입니다. SwiftUI는 사용자가 작성한 [구성된 보기](glossary://composed%20view)를 제공합니다.</string>
				<key>Title</key>
				<string>본문</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>배열에서 인덱스가 가질 수 있는 값의 범위를 뜻합니다. 예를 들어, `[17, 42, 95]` 배열의 인덱스 값의 범위는 0에서 2입니다. 범위 확인은 인덱스 값이 배열 범위 내에 있는지 확인하는 작업입니다.</string>
				<key>Title</key>
				<string>범위</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>카메라에 들어오는 빛의 양입니다. `0`은 빛이 완전히 들어오지 않는 상태이며 `1`은 빛이 완전히 들어오는 상태입니다. 이 밝기 데이터는 `0`과 `1` 사이의 [Double](glossary://Double)(소수점) 값입니다.</string>
				<key>Title</key>
				<string>밝기</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드에 있는 오류 때문에 응용 프로그램이 제대로 실행되지 않는 문제입니다. 
</string>
				<key>Title</key>
				<string>버그</string>
			</dict>
		</dict>
		<key>built-in view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`Button`, `Text` 또는 `Image` 보기와 같이 [SwiftUI](glossary://SwiftUI) 프레임워크에서 제공된 [보기](glossary://view)입니다. 기본 제공 보기는 [사용자 인터페이스](glossary://user%20interface)에서 더 복잡한 [구성된 보기](glossary://composed%20view)를 생성하기 위해 기본 요소로 사용됩니다.</string>
				<key>Title</key>
				<string>기본 제공 보기</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱은 필요한 모든 리소스(데이터 파일, 이미지, 사운드)와 함께 코드를 번들로 저장합니다. 각 앱에는 기본 번들이 있으며 다른 명명된 번들이 있을 수 있습니다. 번들은 디스크에 있는 폴더이며, 번들의 리소스는 잘 정의된 하위 폴더로 구성됩니다. 번들 구조는 플랫폼 및 번들 유형에 따라 다릅니다.</string>
				<key>Title</key>
				<string>번들</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드 내의 함수를 호출하는 것은 해당 함수를 실행하여 함수 내에 정의된 동작을 수행하도록 지시하는 것입니다.</string>
				<key>Title</key>
				<string>호출</string>
			</dict>
		</dict>
		<key>callback</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수 또는 객체가 데이터를 제공하거나 실행 도중 중요한 사항이 발생했을 때 이를 알리기 위해 사용자를 호출해야 하는 경우가 있습니다. 이러한 경우 함수 또는 [대리자](glossary://delegate) 객체에 이를 전달하면 콜백을 실행할 수 있습니다.

콜백은 [비동기](glossary://asynchronous%20process) 프로세스를 처리하는 데 사용되는 일반적인 도구 중 하나입니다.</string>
				<key>Title</key>
				<string>콜백</string>
			</dict>
		</dict>
		<key>chaining</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>각 함수가 다음 함수에 의해 작동되는 객체를 반환하는 일련의 [함수](glossary://function)를 [호출](glossary://call)하는 기술입니다. 함수 호출은 단일 구문으로 서로 연결되어 있습니다. 
				
예를 들어, 제어자는 [보기](glossary://view)를 받고, 일부 변경 사항을 적용하고, 다른 보기를 반환하는 [메소드](glossary://method)이기 때문에 SwiftUI의 [제어자](glossary://modifier)를 연결할 수 있습니다.</string>
				<key>Title</key>
				<string>연결</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클래스는 동일한 유형의 항목 [인스턴스](glossary://instance)를 여러 개 만들 때 청사진처럼 동작하는 코드의 컨테이너입니다. 청사진이 자전거와 같은 객체의 기능과 동작을 정의하듯, 클래스는 이를 [속성](glossary://property) 및 [메소드](glossary://method)로 정의합니다.

클래스의 인스턴스를 생성하면 해당 인스턴스에는 청사진에 정의된 모든 속성과 메소드가 포함됩니다. 모든 인스턴스는 동일한 속성과 메소드를 공유하지만 해당 속성 값을 독립적으로 변경할 수 있어서 클래스에서 생성하거나 인스턴스화하는 각 인스턴스를 사용자화할 수 있습니다. 예를 들어 자전거 클래스에 색상 속성이 있으면 빨간색 자전거와 파란색 자전거 모두 만들 수 있습니다.

클래스는 [구조체](glossary://structure)와 유사한 개념이지만 두 가지 중요한 차이를 보입니다. 클래스는 [참조형](glossary://reference%20type)으로 항상 참조자에 의해 복사되며, 다른 클래스의 정의를 상속할 수 있습니다.</string>
				<key>Title</key>
				<string>클래스</string>
			</dict>
		</dict>
		<key>classification</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기계 학습에서 분류는 레이블이 지정된 데이터 세트를 학습하고 이러한 학습 내용을 사용하여 새로운 관찰 대상을 분류하는 알고리즘입니다.

예를 들어 개 품종 분류자는 개 품종의 레이블이 지정된 이미지에 대해 훈련합니다. 이 분류자에 새로운 개 이미지를 보여주면 이 입력을 해당 품종 중 하나로 분류할 수 있습니다.</string>
				<key>Title</key>
				<string>분류</string>
			</dict>
		</dict>
		<key>closed range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>하한에서 상한까지이며 상한을 포함한 간격입니다.

Swift에서 1~3 범위의 값은 1...3으로 작성할 수 있습니다. 이 경우, 범위는 하한값 1을 포함하며 상한값인 3까지 셉니다.

```
let closedRange = 1...3
for i in closedRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>폐쇄 범위</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클로저는 이름 없이 해당 위치에서 실행할 수 있는 [함수](glossary://function)입니다.
					
```
scene.setOnStartHandler {
    // 클로저의 본문
}
```
                    
클로저는 모든 상수와 변수가 정의된 컨텍스트에서 해당 값에 대한 참조를 캡처하고 저장할 수 있습니다. 이것을 해당 상수와 변수에 대한 클로징이라고 합니다.</string>
				<key>Title</key>
				<string>클로저</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드 주석은 프로그래머가 코드를 문서화하는 하나의 방법이에요.   예를 들어 '// 나의 주석입니다.'와 같이 두 개의 슬래시와 하나의 공백 뒤에 한 줄의 주석을 작성할 수 있어요.   코드를 실행할 때 코드 주석은 실행되지 않습니다.</string>
				<key>Title</key>
				<string>코드 주석</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>값을 반환하도록 선택할 수 있는 코드입니다. 예를 들어, 12개의 항목을 포함하는 `months`가 있다면, 코드 표현식인 `months.count - 1`은 `11`이라는 값을 반환합니다.</string>
				<key>Title</key>
				<string>코드 표현식</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>명령, 코드 구조, 알고리즘을 구성하여 응용 프로그램을 생성하는 행위입니다.</string>
				<key>Title</key>
				<string>코딩</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[배열](glossary://array)이나 [범위](glossary://range)처럼 다양한 데이터를 저장하는 데 사용하는 데이터 구조입니다.
```
let heights = [1, 5, 7]
let closedRange = 1...8
```</string>
				<key>Title</key>
				<string>모음</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램이 특정 동작을 수행하도록 명령하는 코드입니다. </string>
				<key>Title</key>
				<string>명령</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드를 [코드 주석](glossary://code%20comment)으로 바꾸면 코드가 실행되지 않습니다. 코드 앞에 `//`를 추가하여 수행할 수 있어요. 다음 예를 살펴볼까요?
                
`// level.run()`</string>
				<key>Title</key>
				<string>주석 처리</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>두 가지 값을 비교하는 `==`, `!=`, `&lt;`, `&gt;`, `&lt;=`, `&gt;=`과 같은 기호입니다. 비교 연산자는 `if` 구문 또는 `while` 루프의 조건식에서 사용하여 비교 결과가 `true(참)`인지 나타내는 불리언 값을 반환합니다. 예를 들어, `6 &gt; 8`에서는 `6`을 `8`과 비교하고 `false(거짓)`를 반환합니다.</string>
				<key>Title</key>
				<string>비교 연산자</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴파일러 오류는 코드의 부정확성 때문에 발생하는 오류입니다. 컴파일러 오류는 왼쪽 여백 및 도구 막대에서 빨간 점으로 나타납니다.</string>
				<key>Title</key>
				<string>컴파일러 오류</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>하나 이상의 [기본 제공 보기](glossary://built-in%20view) 또는 구성된 보기를 결합하여 생성된 [보기](glossary://view)입니다. 
</string>
				<key>Title</key>
				<string>구성된 보기</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램의 작은 부분을 결합하여 작업하고 이해하기 쉬운 큰 조각을 만드는 프로세스입니다.</string>
				<key>Title</key>
				<string>구성</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>할당(변수 값을 설정하는 동작)과 더하기 또는 빼기와 같은 연산 작업을 조합하는 연산자입니다. 예를 들어, `a`의 현재 값이 `1`이면 `a += 3`은 `1`에 `3`을 더한 다음 결과를 `a`에 할당하게 되어 `a`의 값이 `4`가 됩니다.</string>
				<key>Title</key>
				<string>복합 할당 연산자</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>계산 속성은 값을 직접 저장하는 대신 검색할 때 다른 관련 값의 현재 상태를 기반으로 값을 계산합니다.

아래 예에서 area는 계산 속성이고, `width` 및 `height`는 저장 속성입니다.

```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>계산 속성</string>
			</dict>
		</dict>
		<key>condition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[if 구문](glossary://if%20statement)과 같은 [조건부 코드](glossary://conditional%20code) 블록에서 조건식은 블록 내부의 코드를 실행할지 아니면 실행하지 않을지 여부를 결정하는 [불리언](glossary://Boolean) 값입니다.

조건식이 `true`이면 코드 블록이 실행됩니다. `false`이면 조건 코드는 건너뜁니다.
```
let x = 4

if x &lt; 5 { 
	// 조건식이 참이므로 if 블록의 코드가 실행됩니다. 
}

if x &gt; 5 { 
	// 조건식이 거짓이므로 if 블록의 코드가 실행되지 않습니다. 
}
```</string>
				<key>Title</key>
				<string>조건</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특정 조건식이 맞는 경우에만 작동하는 코드입니다. 예를 들어, [if 구문](glossary://if%20statement) 및 [while 루프](glossary://while%20loop)는 조건식이 `true(참)`일 경우 또는 그 동안에만 작동하는 조건 코드를 포함합니다.
```
if x &gt; 5 {
// x가 5보다 큰 경우에만 코드가 실행됩니다.
}
```</string>
				<key>Title</key>
				<string>조건 코드</string>
			</dict>
		</dict>
		<key>confidence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기계 학습에서 신뢰도는 기계 학습 모델의 [예측](glossary://prediction) 정확도를 나타냅니다. 예측 신뢰도는 ML 모델이 얼마나 잘 수행되고 있는지에 대한 통찰력을 제공합니다.</string>
				<key>Title</key>
				<string>신뢰도</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프로토콜 요구사항에 대한 자체 구현을 제공할 때 프로토콜을 준수함을 의미하는 유형입니다.</string>
				<key>Title</key>
				<string>준수</string>
			</dict>
		</dict>
		<key>console</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드가 실행되는 동안 디버그 출력을 볼 수 있는 곳입니다. 코드에서 `print(_:)`를 호출하면 전달한 값이 콘솔에 표시됩니다.</string>
				<key>Title</key>
				<string>콘솔</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>이름이 지정된 컨테이너입니다. 저장되는 값은 변경할 수 없습니다.</string>
				<key>Title</key>
				<string>상수</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컨테이너는 컨테이너 내부에 다른 보기를 가지고 있는 보기입니다.</string>
				<key>Title</key>
				<string>컨테이너</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>공간의 위치를 지정하는 숫자 조합입니다. 예를 들어, (100, -200)은 2D 공간의 x축 값이 100이고 y축 값이 -200인 위치를 가리키는 좌표입니다.</string>
				<key>Title</key>
				<string>좌표</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터가 처리하거나 저장한 값으로 데이터로 작업을 수행하는 코드와는 별개입니다.</string>
				<key>Title</key>
				<string>데이터</string>
			</dict>
		</dict>
		<key>data cleaning</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터 세트를 검토하여 잘못된 데이터, 불완전한 데이터, 중복된 데이터 또는 적합하지 않은 포맷의 데이터를 제거하거나 수정하는 프로세스입니다.

데이터 정제는 기계 학습 모델이 사용 가능한 가장 관련성이 높고 정확한 데이터만 [훈련](glossary://training)하도록 보장함으로써 기계 학습 모델의 정확도를 향상시킬 수 있습니다.</string>
				<key>Title</key>
				<string>데이터 정제</string>
			</dict>
		</dict>
		<key>data flow</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱을 통한 데이터 이동, 그리고 해당 데이터의 변경으로 인해 앱의 상태 또는 UI가 변경되는 방식입니다.</string>
				<key>Title</key>
				<string>데이터 흐름</string>
			</dict>
		</dict>
		<key>data model</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터 구성을 반영하는 앱에 사용된 데이터의 코드를 표시한 것입니다. [사용자 인터페이스](glossary://user%20interface)는 데이터 모델의 데이터를 표시하고, 데이터 모델과 상호 작용하여 데이터를 수정할 수 있습니다. 데이터 모델은 앱의 [진실 공급원(SOT)](glossary://source%20of%20truth) 역할을 합니다.</string>
				<key>Title</key>
				<string>데이터 모델</string>
			</dict>
		</dict>
		<key>data separation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱의 [데이터 모델](glossary://data%20model)은 해당 데이터를 표시하고 상호 작용하는 데 사용되는 [사용자 인터페이스](glossary://user%20interface)와 별도로 정의되어야 한다는 개념입니다. 데이터 분리를 사용하면 데이터 모델과 UI를 서로 독립적으로 수정할 수 있고, 앱 작동 방식을 더 쉽게 이해할 수 있으며, 앱의 테스트 가능성이 향상됩니다.</string>
				<key>Title</key>
				<string>데이터 분리</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램이 제대로 실행되지 않는 원인인 오류를 코드에서 찾아내어 수정하는 작업입니다. </string>
				<key>Title</key>
				<string>디버깅</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램에 함수, 변수 또는 사용자 설정 유형과 같은 새로운 요소를 생성하는 코드입니다. 예를 들어 `let planet = "Earth"`는 새로운 상수인 `planet`을 생성하고 `"Earth"` 값을 지정합니다.

아래의 코드는 `AppData` 유형의 변수 `data`를 선언하지만 초기 값을 지정하지는 않습니다.

```
var data : AppData
```</string>
				<key>Title</key>
				<string>선언</string>
			</dict>
		</dict>
		<key>decode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터를 JSON과 같은 효율적인 저장 공간 포맷에서 코드에서 더 쉽게 작업할 수 있는 포맷으로 변환합니다.</string>
				<key>Title</key>
				<string>디코딩</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>큰 문제를 관리가 쉬운 작은 부분으로 나누는 프로세스입니다.</string>
				<key>Title</key>
				<string>분해</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 정수 값만큼 숫자를 감소시킵니다. 주로 1로 설정됩니다.</string>
				<key>Title</key>
				<string>감소</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수, 변수, 사용자 정의 유형과 같은 새로 생성한 코드 항목의 특정 값이나 동작을 설정하는 작업입니다. 예를 들어, 함수를 정의하는 경우에는 수행해야 할 명령 세트를 함수 안에 넣습니다.</string>
				<key>Title</key>
				<string>정의</string>
			</dict>
		</dict>
		<key>delegate</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>중요한 이벤트가 발생할 때 사용자에게 알리기 위해 다른 객체에 제공되는 특별한 객체입니다. 대리자 객체는 일반적으로 [프로토콜](glossary://protocol)을 준수하며, 코드와 다시 통신하기 위해 호출할 수 있는 함수를 제공합니다. 대리자 함수가 호출되는 것을 대리자 [콜백](glossary://callback)이라고 합니다.

위임은 특히 [비동기](glossary://asynchronous%20process) 프로세스에서 객체 간 통신에 사용되는 일반적인 패턴입니다.</string>
				<key>Title</key>
				<string>위임</string>
			</dict>
		</dict>
		<key>destination view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[사용자](glossary://user)가 `NavigationStack` 또는 `NavigationSplitView`에서 `NavigationLink`를 클릭하거나 탭한 후 표시되는 보기입니다.</string>
				<key>Title</key>
				<string>대상 보기</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특성에 접근하거나 인스턴스의 메소드를 호출할 때 사용하는 구문법의 유형입니다. 예를 들어, `expert.toggleSwitch()`는 `expert` 인스턴스에 `toggleSwitch()` 메소드를 호출합니다.</string>
				<key>Title</key>
				<string>점 표기법</string>
			</dict>
		</dict>
		<key>edge case</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>희귀한 환경이나 극단적인 작동 매개변수에서 발생하는 상황으로, 예상할 수도 있고 예상하지 못할 수도 있습니다. 

예를 들어 iPad 앱을 만들 때 기기의 언어를 오른쪽에서 왼쪽으로 스크립트를 사용하는 언어(예: 아랍어)로 업데이트하면 앱이 충돌합니다. </string>
				<key>Title</key>
				<string>엣지 케이스</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>작성한 코드가 메모리 또는 전력과 같은 자원을 최대한 적게 소모하면서도 빠르게 필요한 작업을 수행하는지 측정하는 것입니다.</string>
				<key>Title</key>
				<string>효율성</string>
			</dict>
		</dict>
		<key>element</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[배열](glossary:///array) 또는 [범위](glossary://range)와 같은 [모음](glossary://collection)의 항목입니다.

```
let letters = ["a", "b", "c"] // "a"는 첫 번째, "b"는 두 번째, "c"는 세 번째 요소입니다. 
```</string>
				<key>Title</key>
				<string>요소</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if` 구문의 마지막 코드 블록입니다. `if` 구문의 다른 조건식이 모두 `거짓(false)`일 경우에 `else` 블록이 실행됩니다.

```
if hopper.isFacingStep { 
	// if 블록
} else if hopper.isFacingUpdraft { 
	// else if 블록
} else { 
	// else 블록
}
```</string>
				<key>Title</key>
				<string>else 블록</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[if 블록](glossary://if%20block)이나 다른 `else if` 블록에서 확인하지 않은 조건식을 확인하는 데 사용되는 `if` 구문 안에 있는 코드입니다.

```
if hopper.isFacingStep { 
	// if 블록
} else if hopper.isFacingUpdraft { 
	// else if 블록
} else { 
	// else 블록
}
``</string>
				<key>Title</key>
				<string>else if 블록</string>
			</dict>
		</dict>
		<key>encode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터를 JSON과 같은 효율적인 저장 공간 포맷에서 코드에서 더 쉽게 작업할 수 있는 포맷으로 변환합니다.</string>
				<key>Title</key>
				<string>인코딩</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>*케이스*라고 하는 관련 값 세트를 정의하는 유형입니다.

 예를 들어, `Direction` 열거형은 `north`, `south`, `east`, `west` 등 각 방향에 대한 케이스를 정의합니다. 
```
enum Direction { 
	case north, south, east, west
}
```
 열거형 값을 [전달](glossary://pass%20in)할 때는 항상 케이스 중 하나만 선택해야 합니다. 예제:
 ```
 moveIn(direction: .north)
```</string>
				<key>Title</key>
				<string>열거형</string>
			</dict>
		</dict>
		<key>environment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>보기의 환경은 정의된 값 모음에 대한 접근을 제공합니다. 이들 중 일부는 시스템 상태, 사용자 설정 또는 보기 상태를 자동으로 반영합니다. 보기의 색상 체계, 텍스트 스타일 또는 초점을 둔 상태를 예로 들 수 있습니다. 다른 환경은 텍스트 필드에 대한 라인 제한과 같은 유용한 기본값을 제공합니다. `@Environment` [속성 래퍼](glossary://property%20wrapper)를 통해 접근하여 환경 값을 읽을 수 있습니다. 환경 값의 전체 목록은 [여기](doc://com.apple.documentation/documentation/swiftui/environmentvalues)에서 확인할 수 있습니다.</string>
				<key>Title</key>
				<string>환경</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컨테이너 또는 상위 보기에서 제공하는 관찰 가능한 객체 속성을 선언하려면 `@EnvironmentObject` [속성 래퍼](glossary://property%20wrapper)를 추가하세요. 속성을 환경 객체로 선언하는 경우 해당 `environmentObject(_:)` 제어자를 호출하여 상위 보기에서 해당 모델 인스턴스를 설정해야 합니다.</string>
				<key>Title</key>
				<string>환경 객체</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터 응용 프로그램이 탐지할 수 있는 작업입니다. 버튼을 누르거나 화면을 회전하는 것과 같은 입력 값은 이벤트를 실행합니다.</string>
				<key>Title</key>
				<string>이벤트</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>이벤트가 발생하면 호출되어 이벤트를 처리하는 함수입니다.</string>
				<key>Title</key>
				<string>이벤트 핸들러</string>
			</dict>
		</dict>
		<key>extension</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[클래스](glossary://class), [구조](glossary://structure), [열거형](glossary://enumeration), [프로토콜](glossary://protocol) 등 기존 [유형](glossary://type)에 새로운 기능을 추가하는 방법입니다.

확장을 사용하면 기존 유형에 [메소드](glossary://method) 및 [속성](glossary://property)을 추가할 수 있습니다. 아래의 코드는 `cubed()` 메소드 및 `isOdd` 속성을 `Int` 유형에 추가합니다.

```
extension Int { 
	func cubed() -&gt; Int { 
        return self * self * self
    }
    
    var isOdd : Bool { 
        return self % 2 == 1
    }
}

let two : Int = 2
print(two.cubed()) // 8
print(two.isOdd) // 거짓
```</string>
				<key>Title</key>
				<string>확장</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>모음에 있는 데이터나 데이터 구조에 있는 데이터를 처리하여 새로운 데이터 세트를 생성하는 작업입니다.</string>
				<key>Title</key>
				<string>필터링</string>
			</dict>
		</dict>
		<key>focus state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>텍스트 필드에 입력하는 것과 같이 사용자 입력을 수신할 수 있는 보기의 수신 가능한 상태를 나타내는 값입니다. `@FocusState` [속성 래퍼](glossary://property%20wrapper)를 `focused(_:equals:)` 및 `focused(_:)` 제어자와 함께 사용하여 사용자 상호 작용에 따라 초점을 둔 값이 자동으로 업데이트되고 특정 시간에 초점을 두거나 초점이 해제될 수 있는 보기를 생성합니다.</string>
				<key>Title</key>
				<string>초점을 둔 상태</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>고유의 디자인 스타일, 굵기, 크기가 적용된 텍스트 문자 세트입니다. 서체의 디자인 스타일은 *글자체*라고 불리며 해당 디자인의 변형된 형태는 글자체 *패밀리*라고 합니다. 예를 들어, HelveticaNeue는 글자체이며 10포인트 크기의 HelveticaNeue-Bold는 서체라고 부릅니다.</string>
				<key>Title</key>
				<string>서체</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특정 횟수만큼 실행되는 반복 코드 블록입니다.

루프는 [범위](glossary://range%20value) 또는 [배열](glossary://array)과 같은 데이터 [모음](glossary://collection)을 [반복](glossary://iterate)하여 모음의 각 요소에 대해 루프 블록을 실행할 수 있습니다.

아래 예시에서 루프는 모음의 현재 요소 값에 접근할 수 있는 루프 변수 `value`를 정의합니다.
특정 횟수만큼 실행되는 반복 코드 블록입니다.

루프는 [범위](glossary://iterate) 또는 [배열](glossary://array)과 같은 데이터 [모음](glossary://collection)을 [반복](glossary://iterate)하여 모음의 각 요소에 대해 루프 블록을 실행할 수 있습니다.

아래 예시에서 루프는 모음의 현재 요소 값에 접근할 수 있는 루프 변수 `value`를 정의합니다.
```
for value in 1...4 { 
	byte.moveForward()
	byte.jump(height: value)
}
```</string>
				<key>Title</key>
				<string>for 루프</string>
			</dict>
		</dict>
		<key>framework</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프레임워크는 공유 리소스를 포함하는 디렉토리입니다. 이러한 리소스에는 소스 파일, 이미지 파일, 지역화된 문자열, 참조 문서 등이 단일 패키지로 포함될 수 있습니다. 여러 응용 프로그램에서 이러한 모든 리소스를 동시에 사용할 수 있습니다. 시스템은 필요에 따라 해당 리소스를 메모리에 로드하고 가능할 때마다 모든 응용 프로그램에서 리소스의 복사본 하나를 공유합니다.</string>
				<key>Title</key>
				<string>프레임워크</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수 이름과 매개변수 이름을 포함한 함수의 전체 이름입니다. 매개변수는 콜론(`:`)을 달아 구분합니다. 예: `move(to:duration:)`.</string>
				<key>Title</key>
				<string>전체 함수 이름</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>이름이 [호출](glossary://call)될 때 실행되는 이름이 지정된 코드 블록입니다. 함수는 [매개변수](glossary://parameter) 유형으로 데이터를 전달할 수 있으며, 코드 실행이 끝나면 선택적으로 데이터를 [반환](glossary://return)할 수 있습니다. 유형 내에 정의된 함수를 [메소드](glossary://method)라고 합니다.

아래는 `turnRight()`에 대한 함수 정의의 예시입니다. `turnRight()`을 작성하여 이 함수를 호출할 수 있습니다. 그러면 코드가 실행되어 `turnLeft()`를 세 번 실행합니다.

```
func turnRight() { 
	turnLeft()
	turnLeft()
	turnLeft()
}
```</string>
				<key>Title</key>
				<string>함수</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수 정의는 함수가 수행하는 동작, 함수가 받는 입력, 함수가 완료되면 반환하는 항목에 대해 설명합니다.</string>
				<key>Title</key>
				<string>함수 정의</string>
			</dict>
		</dict>
		<key>fuzzy autocomplete</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>퍼지 문자열 검색을 사용하여 일치하는 변수, 상수, 유형 및 기타 기호를 찾는 코드 자동 완성 메소드입니다. 퍼지 문자열 검색은 정확하지 않지만 입력한 문자를 기반으로 관련 일치 항목을 찾습니다. 

예를 들어, "scale"과 관련이 있는 [보기 제어자](glossary://modifier)를 검색하는 경우, `.scale`을 입력하기 시작하면 `.scale`로 시작하는 `.scaledToFill` 및 `.scaleEffect`뿐만 아니라 `.imageScale` 및 `.grayscale`과 같은 '퍼지' 일치 항목의 자동 완성 옵션도 반환됩니다.
</string>
				<key>Title</key>
				<string>퍼지 자동 완성하기</string>
			</dict>
		</dict>
		<key>g</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>가속도 측정 단위 또는 질량당 힘의 단위입니다. 1g 또는 g-force는 지구의 중력 가속도와 같으며, 약 9.8m/s²입니다.</string>
				<key>Title</key>
				<string>g</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프로젝트의 모든 파일에서 접근할 수 있는 함수입니다.</string>
				<key>Title</key>
				<string>전역 함수</string>
			</dict>
		</dict>
		<key>global scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>동일한 [모듈](glossary://module)에 있는 모든 소스 파일의 코드에서 접근할 수 있는 기호입니다. 소스 파일의 최상위 레벨에서 정의된 모든 인스턴스, 유형 또는 함수에는 기본적으로 전역 범위가 있습니다. </string>
				<key>Title</key>
				<string>전역 범위</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>프로젝트의 모든 파일에서 접근할 수 있는 변수입니다.</string>
				<key>Title</key>
				<string>전역 변수</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>흰색에서 검은색까지 회색 음영의 범위입니다.</string>
				<key>Title</key>
				<string>흑백음영</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자 기기의 방향을 3차원(전후 기울임, 좌우 기울임, 중앙을 중심으로 회전)으로 측정하는 센서입니다.</string>
				<key>Title</key>
				<string>자이로스코프</string>
			</dict>
		</dict>
		<key>half open range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>하한에서 상한까지지만 상한을 포함하지 않는 반개방 간격입니다.

Swift에서 1~3 범위의 값은 1..&lt;4로 작성할 수 있습니다. 이 경우, 범위는 하한값 1을 포함하며 최대 4까지 세지만 4의 값은 포함하지 않습니다. 
```
let halfOpenRange = 1..&lt;4
for i in halfOpenRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>반개방 범위</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>헤르츠(Hz)는 초당 1회의 사이클을 말합니다. 이를 음의 진동에 적용하는 경우 1Hz는 초당 1번의 음파가 발생하는 것입니다. 인간은 20Hz에서 16,000Hz 사이의 소리를 들을 수 있습니다.</string>
				<key>Title</key>
				<string>헤르츠</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>색상 원판에 있는 색상의 톤을 말합니다. 색조는 `0`과 `1` 사이의 Double(소수점) 값입니다.</string>
				<key>Title</key>
				<string>색조</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if` 구문의 첫 코드 블록입니다. `if` 조건식이 `true(참)`일 경우에 `if` 블록이 실행됩니다.
```
if blu.isFacingStep { 
	blu.jump()
}
```</string>
				<key>Title</key>
				<string>if 블록</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드 구조로 한 가지 이상의 조건식 값에 기반하여 코드가 실행됩니다. `if` 구문의 첫 번째 코드 블록은 `if` 블록입니다.
```
if blu.isFacingStep { 
	blu.jump()
}
```
`if` 구문은 `else` 블록 및 `else if` 블록처럼 조건식을 추가로 제공하는 다른 블록을 포함할 수 있습니다.
```
if blu.isFacingStep { 
	blu.jump()
} else if blu.isFacingHole { 
	blu.shapeShift(into: .bridge)
} else { 
	blu.moveForward()
}
```</string>
				<key>Title</key>
				<string>if 구문</string>
			</dict>
		</dict>
		<key>import</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Swift에서 `import` [선언](glossary://declaration)을 사용하면 현재 파일 외부에 정의된 유형, 함수, 속성 및 메소드와 같은 심볼에 접근할 수 있습니다. [SwiftUI](doc://com.apple.documentation/documentation/swiftui) 또는 [CoreMotion](doc://com.apple.documentation/documentation/coremotion)과 같은 [모듈](glossary://module)이나 [프레임워크](glossary://framework)에서 기호를 가져올 수 있습니다. 예를 들어 SwiftUI 프레임워크를 사용하려면 다음 선언을 파일 상단에 배치합니다.

```
import SwiftUI
```
</string>
				<key>Title</key>
				<string>가져오기</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 정수 값만큼 숫자를 증가시킵니다. 주로 1로 설정됩니다.</string>
				<key>Title</key>
				<string>증가</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[배열](glossary://array)에 있는 항목의 위치를 나타내는 숫자입니다.</string>
				<key>Title</key>
				<string>인덱스</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>배열의 범위를 벗어나는 인덱스를 사용하여 접근을 시도하면 발생하는 오류입니다. 예를 들어, 인덱스 `2`는 `[17, 42]`와 같은 배열의 범위를 벗어납니다.</string>
				<key>Title</key>
				<string>인덱스 범위 초과 오류</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>유형의 속성에 대한 초기 값을 설정하는 것을 포함하여 유형의 인스턴스를 새로 생성하는 행위입니다.</string>
				<key>Title</key>
				<string>초기화</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>유형의 [인스턴스](glossary://instance)를 새로 생성하도록 이니셜라이저를 호출합니다. 이니셜라이저는 해당 유형의 속성이 모두 초기 값을 가지며, 주로 다른 설정 코드를 포함하는지 확인해야 합니다.</string>
				<key>Title</key>
				<string>이니셜라이저</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>(외부) 루프 안에 내포되어 있는 반복되는 코드 블록(루프)입니다.</string>
				<key>Title</key>
				<string>내부 루프</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특정 [유형](glossary://type)의 값입니다. 예를 들어, `let motion = MotionSensor()`에서 `motion`은 `MotionSensor` 유형의 인스턴스입니다.</string>
				<key>Title</key>
				<string>인스턴스</string>
			</dict>
		</dict>
		<key>integer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`2` 또는 `-5`와 같은 정수입니다.</string>
				<key>Title</key>
				<string>정수</string>
			</dict>
		</dict>
		<key>iterate</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>배열 또는 범위와 같이 [모음](glossary://collection)의 모든 [요소](glossary://element)에 대해 코드 블록을 반복합니다.

아래 예시에서 for 루프는 `days` 배열을 통해 반복하며 한 번에 한 개의 요일을 프린트합니다.
```
let days = ["Monday", "Tuesday", "Wednesday"]

for value in days { 
	print(value)
}

// 첫 번째 반복: "Monday"를 프린트합니다.
// 두 번째 반복: "Tuesday"를 프린트합니다.
// 세 번째 반복: "Wednesday"를 프린트합니다.
```</string>
				<key>Title</key>
				<string>반복</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>배열의 각 항목에 동일한 작업을 수행하는 것과 같이 프로세스를 반복하는 행위입니다.</string>
				<key>Title</key>
				<string>반복</string>
			</dict>
		</dict>
		<key>label</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[보기](glossary://view)로 생성된 UI 요소를 시각적으로 표시한 것입니다.

많은 SwiftUI [기본 제공 보기](glossary://built-in%20view)에는 레이블(시각적 표시)과 `NavigationLink`에 대한 [대상 보기](glossary://destination%20view) 또는 `Button`에 대한 동작 [콜백](glossary://callback)과 같은 기타 사용자화 부분이 있습니다.</string>
				<key>Title</key>
				<string>레이블</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>처리 요구, 처리 능력 또는 이 두 요소로 인한 앱 속도 또는 반응 속도의 저하입니다.</string>
				<key>Title</key>
				<string>지연</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>보기 내의 콘텐츠를 참조할 때 시작 가장자리는 콘텐츠 시작의 수평적 위치를 참조합니다. 시작 가장자리의 위치는 환경설정에 따라 달라지며 일반적으로 지역 및 언어 설정에 따라 달라집니다.
예를 들어, 영어나 네덜란드어와 같이 왼쪽에서 오른쪽으로 읽는 언어에서는 시작 가장자리는 왼쪽에 있습니다. 아랍어나 히브리어와 같이 오른쪽에서 왼쪽으로 읽는 언어의 경우 시작 가장자리는 오른쪽에 있습니다.</string>
				<key>Title</key>
				<string>시작 가장자리</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>리터럴을 사용하면 이미지 보관함 또는 색상 선택기를 통해 이미지 및 색상을 코드에 바로 추가할 수 있어요. 리터럴은 편집기 내에서 바로 고유 포맷으로 표시되는 데이터의 실제 값입니다.</string>
				<key>Title</key>
				<string>리터럴</string>
			</dict>
		</dict>
		<key>local scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[전역 범위](glossary://global%20scope) 아래의 새로운 코드 레벨 구성마다 지역 범위가 형성됩니다. 예를 들어, 새로운 [유형](glossary://type)은 새로운 지역 범위를 형성하고, 해당 유형 내의 함수 및 코드 블록은 자체 [범위](glossary://scope) 레벨을 형성합니다. 기호가 선언된 위치에 따라 동일한 레벨이나 더 낮은 레벨의 범위에 있는 코드에서만 접근할 수 있습니다.

예를 들어, 변수가 유형 내부에 정의된 경우에 해당 변수는 해당 유형 내의 모든 함수 및 코드 블록에서 접근할 수 있습니다. 그러나 메소드 내부에 정의된 상수는 메소드 정의 내부에서만 접근할 수 있습니다.</string>
				<key>Title</key>
				<string>지역 범위</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>두 개의 불리언 값을 결합하는 기호(`&amp;&amp;`)입니다. 모든 값이 true(참)여야 전체 코드가 true(참)가 됩니다. 예를 들어, `a &amp;&amp; b`가 true(참)가 되려면 `a`와 `b` 모두 `true`(참)가 되어야 합니다.</string>
				<key>Title</key>
				<string>논리 연산자 AND</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드의 불리언 값을 반대로 변경하는 기호(`!`)입니다. 예를 들어 `a`가 `true(참)`인 경우 `!a`는 `false(거짓)`입니다.</string>
				<key>Title</key>
				<string>논리 연산자 NOT</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>두 개의 불리언 값을 결합하는 기호(`||`)입니다. 두 개 중 하나가 true(참)여야 전체 코드가 true(참)가 됩니다. 예를 들어, `a || b`가 `true(참)`가 되려면 `a`나 `b` 중 하나가 `true(참)`거나 모두 `true(참)`가 되어야 합니다.</string>
				<key>Title</key>
				<string>논리 연산자 OR</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>불리언 논리 값 `true(참)` 및 `false(거짓)`를 수정하거나 조합하는 `&amp;&amp;`, `||`, `!`와 같은 기호입니다.</string>
				<key>Title</key>
				<string>논리 연산자</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`for` 루프처럼 특정 횟수만큼 반복되거나 `while` 루프처럼 조건식이 맞을 때까지 반복되는 코드입니다.</string>
				<key>Title</key>
				<string>루프</string>
			</dict>
		</dict>
		<key>loop variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[for 루프](glossary://for%20loop)에서 [반복](glosssary://iterate)하고 있는 [모음](glossary://collection)의 현재 요소 값입니다.

루프 변수는 이 값을 저장하기 때문에 `for` 루프의 본문에서 사용할 수 있습니다. 

다음 예제의 `value`와 `letter`는 루프 변수입니다.
```
for value in 1...4 { 
	print(value) // 1 2 3 4
}

for letter in ["c", "o", "d", "e"] { 
	print(letter) // c o d e 
}
```</string>
				<key>Title</key>
				<string>루프 변수</string>
			</dict>
		</dict>
		<key>lower bound</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[범위](glossary://range)에서 셈을 시작하는 시작 값입니다.

```
let closedRange = 1...5 // 하한은 1, 상한은 5
for i in closedRange { 
	print(i) // 1 2 3 4 5
}
```</string>
				<key>Title</key>
				<string>하한</string>
			</dict>
		</dict>
		<key>machine learning</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터 과학의 한 분야로, 대량의 데이터를 사용하여 특정 프로세스를 학습하고 향상하는 방법을 기계에게 가르치는 [알고리즘](glossary://algorithm) 개발에 주력합니다. 

예를 들어 이미지 [분리자](glossary://classification)를 사용하고 대량의 꽃 이미지 데이터 세트를 제공하여 기계가 특정 꽃 종류를 인식하도록 가르칩니다.</string>
				<key>Title</key>
				<string>기계 학습</string>
			</dict>
		</dict>
		<key>machine learning model</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[훈련 데이터 세트](glossary://training%20dataset)에 기계 학습 [알고리즘](glossary://algorithm)을 적용하여 생성한 [데이터 모델](glossary://data%20model)의 유형입니다. 기계 학습 모델 또는 ML 모델은 입력 소스에서 [예측](glossary://prediction)을 생성하는 데 사용됩니다.</string>
				<key>Title</key>
				<string>기계 학습 모델</string>
			</dict>
		</dict>
		<key>magnitude</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>양수와 음수에 관계없이 값의 크기를 말합니다. 숫자의 [절대값](glossary://absolute%value)이라고도 합니다. 

예를 들어, 크기 `5`와 크기 `-5`는 모두 `5`입니다.</string>
				<key>Title</key>
				<string>크기</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램의 코드와 코드가 사용하는 데이터를 일시적으로나 영구히 저장하는 컴퓨터 부품입니다.</string>
				<key>Title</key>
				<string>메모리</string>
			</dict>
		</dict>
		<key>metadata</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터에 대한 추가 정보입니다. 예를 들어, 사진에는 사진을 찍은 위치에 대한 메타데이터가 포함될 수 있습니다.</string>
				<key>Title</key>
				<string>메타데이터</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>이름이 [호출](glossary://call)될 때 실행되는 이름이 지정된 코드 블록입니다.

메소드는 [함수](glossary://function)이지만 [유형](glossary://type) 내에 정의됩니다.

이 코드는 `byte`라고 하는 [인스턴스](glossary://instance)에서 메소드 `moveForward()`를 호출합니다.
이름이 [호출](glossary://call)될 때 실행되는 이름이 지정된 코드 블록입니다.

메소드는 [함수](glossary://function)이지만 [유형](glossary://type) 내에 정의됩니다.

이 코드는 `byte`라고 하는 [인스턴스](glossary://instance)에서 메소드 `moveForward()`를 호출합니다.

```
let byte = Byte()

byte.moveForward()
```</string>
				<key>Title</key>
				<string>메소드</string>
			</dict>
		</dict>
		<key>miter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>모서리가 둥글거나 비스듬하지 않고 뾰족한 선으로 그려진 두 개의 선 결합 스타일입니다.</string>
				<key>Title</key>
				<string>이음</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI에서 제어자는 보기의 모양이나 동작을 사용자화하기 위해 사용됩니다.

					아래 코드에서 `foregroundColor` 제어자는 `Rectangle` 보기의 색상을 파란색으로 변경합니다.
					```
					Rectangle()
							.foregroundColor(.blue)
					```

					제어자의 가독성을 위해 각 제어자는 수정되는 보기 아래의 별도의 줄에 있습니다. 이 예시에서는 `foregroundColor(.blue)` 제어자가 먼저 적용된 다음에 `border(.green)`이 적용됩니다.
					```
					Rectangle()
							.foregroundColor(.blue)
							.border(.green)
					```
					
					제어자가 순서대로 적용되므로 제어자의 위치를 전환하면 결과 보기의 모양이나 동작을 변경할 수 있습니다.</string>
				<key>Title</key>
				<string>제어자</string>
			</dict>
		</dict>
		<key>modularity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱을 독립적인 부분으로 분리하기 위한 원칙입니다. 각 부분에는 인터페이스의 단일 부분을 표시하거나 앱 데이터를 저장하는 것과 같이 앱에서 단일 기능을 수행하는 데 필요한 모든 요소가 포함되어 있습니다.

모듈화가 중요한 원칙인 이유는 개별 기능을 더 잘 이해하고 작업할 수 있게 하여 앱에 버그가 있을 때 문제가 발생한 부분을 더 쉽게 감지할 수 있기 때문입니다.</string>
				<key>Title</key>
				<string>모듈</string>
			</dict>
		</dict>
		<key>module</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>단일 코드 배포 단위인 [프레임워크](glossary://framework) 또는 단일 단위로 제작 및 게시된 응용 프로그램으로, Swift의 [가져오기](glossary://import) 키워드를 사용하여 다른 모듈에서 가져올 수 있습니다.</string>
				<key>Title</key>
				<string>모듈</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>한 숫자를 다른 숫자로 나눈 후에 나온 나머지 값을 반환하는 기호(`%`)입니다. 예를 들어, `17 % 5`는 `2`를 반환합니다.</string>
				<key>Title</key>
				<string>모듈로 연산자</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>탐색 인터페이스를 통해 대상에 도달할 때까지 화면당 하나의 선택을 할 수 있습니다. 다른 대상으로 이동하려면 단계를 다시 추적하거나 처음부터 다시 시작해서 다른 선택을 해야 합니다. 화면 상단에 있는 탐색 막대에는 현재 위치를 기억하는 데 도움이 되는 제목이 표시되고, 이전 화면으로 돌아갈 수 있도록 뒤로 버튼이 제공됩니다.</string>
				<key>Title</key>
				<string>탐색 막대</string>
			</dict>
		</dict>
		<key>navigation link</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자가 탭할 때 [대상 보기](glossary://destination%20view)로 이동하는 SwiftUI [기본 제공 보기](glossary://built-in%20view)입니다. 탐색 링크에는 시각적 모양을 결정하는 [레이블](glossary://label)도 있습니다.</string>
				<key>Title</key>
				<string>탐색 링크</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>루프와 같은 반복되는 코드 블록이 다른 코드 블록에 추가되어 있는 경우를 말합니다.</string>
				<key>Title</key>
				<string>내포</string>
			</dict>
		</dict>
		<key>normalization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>크기 조절한 결과 값이 `0`과 `1` 사이가 되도록 데이터 세트를 크기 조절하는 프로세스입니다.</string>
				<key>Title</key>
				<string>표준화</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클래스가 `ObservableObject` 프로토콜을 [준수](glossary://conform)하는 경우, 게시된 값을 변경하면 해당 값을 사용하는 모든 보기가 변경 사항을 반영하여 자동으로 업데이트됩니다.</string>
				<key>Title</key>
				<string>관찰 가능한 객체</string>
			</dict>
		</dict>
		<key>observe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>객체의 [상태 변경](glossary://state%20change)을 모니터링합니다.</string>
				<key>Title</key>
				<string>관찰</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI는 [보기](glossary://view) 내부에서 `@ObservedObject` [속성 래퍼](glossary://property%20wrapper)를 사용하는 모든 [속성](glossary://property)의 변경 사항을 감시합니다. 값이 변경되면 SwiftUI는 보기를 업데이트합니다.

관찰된 객체 속성의 유형은 `ObservableObject` 프로토콜을 [준수](glossary://conform)해야 합니다.
				</string>
				<key>Title</key>
				<string>관찰된 객체</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[관찰 가능한 객체](glossary://observable%20object)와 관련하여 관찰자는 관찰 가능한 객체의 데이터를 사용하는 보기 또는 객체입니다. 관찰 가능한 객체의 데이터가 변경되는 경우 SwiftUI는 변경 사항을 인식하고 관찰자가 업데이트하도록 합니다.</string>
				<key>Title</key>
				<string>관찰자</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>한 개 이상의 값에 대한 작업을 나타내는 `+`, `-`, `&amp;&amp;`와 같은 기호입니다. 예를 들어, `1 + 2`에서 추가 연산자(`+`)는 숫자 `1`과 `2`를 더합니다.</string>
				<key>Title</key>
				<string>연산자</string>
			</dict>
		</dict>
		<key>optional</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>래핑된 값을 표시하거나 또는 값을 표시하지 않는 유형입니다. 선택적 유형은 일반적으로 후행 물음표(`?`)로 표시됩니다.
				
예를 들어, `Int?` 유형의 변수는 `-43` 또는 `6`의 래핑된 `Int` 값을 포함하거나, 할당된 값이 없는 `nil`일 수 있습니다.</string>
				<key>Title</key>
				<string>선택사항</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>(내부) 루프를 또 하나 포함하는 반복되는 코드 블록(루프)입니다.</string>
				<key>Title</key>
				<string>외부 루프</string>
			</dict>
		</dict>
		<key>overfitting</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기계 학습에서 특정 데이터 세트와 너무 밀접하게 대응하는 모델의 프로덕션입니다. 

예를 들어 사용자의 모델이 포유류의 이미지를 감지하는 [분류자](glossary://classification)인데, [훈련 데이터 세트](glossary://training%20dataset)에 개 이미지만 포함되어 있다면, 해당 모델은 토끼 또는 사슴 등의 다른 포유류를 무시하면서 개를 인식하도록 과적합이 발생합니다.</string>
				<key>Title</key>
				<string>과적합</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[함수](glossary://function)의 동작 방식을 사용자화하는 데 사용되는 값입니다. 함수를 [호출](glossary://call)할 때 다른 값을 전달하여 동작을 변경할 수 있습니다.

아래 함수에서 `distance`는 `Int` 유형의 값을 받는 매개변수입니다.
```
func move(distance: Int) { 
	for i in 1...distance { 
		moveForward()
	}
}
```

매개변수 값(`distance`)은 함수 본문에 사용하여 함수의 동작 방식에 영향을 줄 수 있습니다. 이 경우 `move(distance: 2)` 또는 `move(distance: 5)`와 같은 다른 정수 값으로 이 함수를 호출하여 다양한 거리를 이동할 수 있습니다.</string>
				<key>Title</key>
				<string>매개변수</string>
			</dict>
		</dict>
		<key>pass in</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수의 [매개변수](glossary://parameter) 중 하나에 값을 제공합니다. 

아래 예시에서는 `text` 매개변수에 "Hello"라는 값을 전달합니다.
```
speak(text: "Hello")
```</string>
				<key>Title</key>
				<string>전달</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>반복되는 상황 또는 데이터 세트입니다.</string>
				<key>Title</key>
				<string>패턴</string>
			</dict>
		</dict>
		<key>persistence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱이 실행될 때마다 사용자 데이터를 다시 로드할 수 있도록 사용자 데이터를 저장하는 프로세스입니다. 지속성이 없으면 앱이 다시 시작될 때마다 앱의 상태와 데이터가 재설정됩니다.</string>
				<key>Title</key>
				<string>지속성</string>
			</dict>
		</dict>
		<key>pi</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>파이(π)는 3.14와 대략적으로 일치하는 수학 상수로서, 원의 둘레와 지름의 비율입니다.</string>
				<key>Title</key>
				<string>파이</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기기가 가로 화면 방향일 때 기기가 좌우 방향으로 얼나마 회전 또는 기울어졌는지 측정한 값입니다.   수학적으로 피치는 기기의 x축을 중심으로 한 회전입니다. 이는 라디안으로 측정되며 `-π/2`에서 `π/2`의 범위를 갖습니다.</string>
				<key>Title</key>
				<string>피치</string>
			</dict>
		</dict>
		<key>pitch audio</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사운드의 피치는 음파의 진동 주파수에 따라 달라집니다. 특정 기간 동안 생성되는 음파가 많을수록 피치가 높아집니다. 

					음악에서 피치는 음이 '낮게' 또는 '높게' 들리는지 여부를 나타냅니다. 예를 들어, 새소리는 높은 피치에서 들리고 사자의 낮은 포효는 낮은 피치에서 사운드를 생성합니다.</string>
				<key>Title</key>
				<string>피치</string>
			</dict>
		</dict>
		<key>placeholder view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>최종 콘텐츠를 로드하거나 입력할 위치를 나타내기 위해 일시적으로 표시되는 보기입니다. 예를 들어 로딩 이미지를 표시하는 데 사용되는 `ProgressView`나 텍스트를 입력할 수 있는 회색 사각형이 있습니다.</string>
				<key>Title</key>
				<string>위치 지정자 보기</string>
			</dict>
		</dict>
		<key>prediction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기계 학습에서 예측은 기계 학습 모델에 입력을 넣으면 나오는 출력입니다. 

예를 들어, 골든 리트리버는 다른 품종의 개를 인식하도록 훈련된 기계 학습 모델에서 유효한 예측 항목이 될 수 있습니다.</string>
				<key>Title</key>
				<string>예측</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>private 키워드는 특정 소스 파일 내에서만 코드를 사용할 수 있게 합니다.
- callout(예제):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[유형](glossary://type) 내에서 정의된 변수(값을 저장하는 이름이 저장된 컨테이너)입니다.

[점 표기법](glossary://dot%20notation)을 사용하는 유형의 [인스턴스](glossary://instance)를 통해 속성에 접근할 수 있습니다. 아래 코드에서 `isFacingHole`은 `Hopper` 유형의 속성입니다.
```
if hopper.isFacingHole { 
	// 코드 
}
```</string>
				<key>Title</key>
				<string>속성</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>속성 래퍼는 동작의 일반적인 패턴을 속성에 적용하는 간단한 방식입니다. 이 래퍼는 읽을 때 저장되거나 계산되는 방법을 정의하는 속성에 주석을 추가하는 방식입니다.   예를 들어, `@State` 속성 래퍼는 SwiftUI가 값에 대한 저장 공간을 관리하고, 해당 값이 변경될 때마다 이를 사용하는 보기의 모든 부분을 업데이트하도록 합니다.</string>
				<key>Title</key>
				<string>속성 래퍼</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클래스, 구조 또는 열거형과 같은 유형에서 채택될 수 있는, 메소드 및 속성과 같은 요구 사항 세트입니다.   유형이 프로토콜을 채택하면 프로토콜 요구 사항의 고유한 구현을 제공하며, 이는 해당 프로토콜을 준수함을 의미합니다.</string>
				<key>Title</key>
				<string>프로토콜</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>알고리즘에 대한 읽기 쉬운 설명입니다. 누구나 읽고 이해할 수 있도록 일상적인 말과 간단한 코드로 작성됩니다.</string>
				<key>Title</key>
				<string>의사 코드</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>public 키워드는 프로젝트 내의 모든 파일에서 코드를 사용할 수 있게 합니다.
                        
- callout(예제):
`public func decorateWithSticker(space: Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>publish</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 [게시된 속성](glossary://published%20value)의 값이 변경될 때 [관찰 가능한 객체](glossary://observable%20object)의 모든 [관찰자](glossary://observer)에게 알림을 브로드캐스트합니다.</string>
				<key>Title</key>
				<string>게시</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>값이 변경되려고 할 때 모든 [관찰자](glossary://observer)에 알림을 보내는 속성을 선언하려면 `@Published` [속성 래퍼](glossary://property%20wrapper)를 추가하세요. 값이 변경되면 SwiftUI는 해당 데이터를 사용하는 모든 보기를 업데이트합니다.</string>
				<key>Title</key>
				<string>게시된 값</string>
			</dict>
		</dict>
		<key>radians</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>라디안은 각도를 측정하는 단위이며 도와 유사합니다. 라디안의 각도는 호의 길이와 해당 각도 주위로 그린 원의 반지름 간의 비율과 같습니다. 1라디안은 180도를 [파이](glossary://pi)로 나눈 값과 같습니다.</string>
				<key>Title</key>
				<string>라디안</string>
			</dict>
		</dict>
		<key>range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[하한](glossary://lower%20bound)과 [상한](glossary://upper%20bound) 사이의 간격입니다.

범위를 만드는 방법에는 [폐쇄 범위](glossary://closed%20range) 및 [반개방 범위](glossary://half%20open%20range) 등 여러 가지가 있습니다.

```
let closedRange = 1...4 
for i in closedRange { 
	print(i) // 1 2 3 4
}

let halfOpenRange = 1..&lt;4 
for i in halfOpenRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>범위</string>
			</dict>
		</dict>
		<key>reference type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>클래스 또는 액터와 같은 참조형의 [인스턴스](glossary://instance)를 생성하면 해당 데이터가 공유 메모리에 저장됩니다. 따라서 인스턴스에는 고유한 복사본 대신 데이터에 대한 참조자만 포함됩니다. 인스턴스를 변수에 [할당](glossary://assignment)하거나 함수에 [인수](glossary://argument)로 전달하면 Swift는 동일한 데이터에 대한 다른 참조자를 생성합니다.

인스턴스는 아래 예제와 같이 참조자에 의해 복사됩니다.

```
class Bicycle {
  var color: Color
   init(color: Color) {
     self.color = color
   }
}

var redBike = Bicycle(color: .red)
var blueBike = redBike
blueBike.color = .blue
print(redBike.color) // =&gt; blue
print(blueBike.color) // =&gt; blue
// redBike와 blueBike는 동일한 데이터에 대한 참조자를 공유합니다.
```</string>
				<key>Title</key>
				<string>참조형</string>
			</dict>
		</dict>
		<key>responsive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>코드 또는 사용자 인터페이스가 [사용자 상호 작용](glossary://user%20interaction)에 빠르게 반응하거나 보기 크기 변경과 같은 환경 변화에 적절하게 대응하는 경우 응답합니다.</string>
				<key>Title</key>
				<string>응답하기</string>
			</dict>
		</dict>
		<key>return</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[함수](glossary://function)의 호출자에게 값을 다시 보냅니다. 예를 들어, `contains(3)` 함수는 배열 `[0,1,2]`에서 실행될 때 배열에 값 `3`이 포함되어 있지 않기 때문에 불리언 값 `false`를 반환합니다.</string>
				<key>Title</key>
				<string>반환</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>함수를 정의할 때, 함수가 완료되면 해당 함수가 출력으로 다시 전달할 값의 유형을 사용자가 정의할 수 있으며 이것을 반환 유형이라고 합니다.</string>
				<key>Title</key>
				<string>반환 유형</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램 내의 다른 상황에서도 사용할 수 있게 하는 코드의 특성입니다.</string>
				<key>Title</key>
				<string>재사용성</string>
			</dict>
		</dict>
		<key>roll</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기기가 가로 화면 방향일 때 기기가 전후 방향으로 얼나마 회전 또는 기울어졌는지 측정한 값입니다.   수학적으로 이는 기기의 y축을 중심으로 한 회전입니다. 이는 라디안으로 측정되며 `-π`에서 `π`의 범위를 갖습니다.</string>
				<key>Title</key>
				<string>롤(roll)</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>다른 모든 보기가 배치된 보기입니다. [최상위 레벨 보기](glossary://top-level%20view)라고도 하는 이 보기는 [보기 계층](glossary://view%20hierarchy)의 상단에 있고, 계층에 있는 모든 [하위 보기](glossary://subview)에 [컨테이너 보기](glossary://container)처럼 동작합니다.</string>
				<key>Title</key>
				<string>루트 보기</string>
			</dict>
		</dict>
		<key>rubber ducky method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>고무 오리와 같은 무생물 객체의 개념을 아주 자세하게 설명하는 학습 메소드입니다. 이 기술을 수행하려면 무생물 객체를 획득하고, 개념을 소리 내어 설명하고 오리를 이해하는 데 필요한 모든 정보가 포함되어 있는지 확인합니다. 설명하는 동안 정보가 부족하다면 나중에 조사할 수 있도록 메모해 두세요. 고무 오리에 대한 새로운 정보는 후속 설명에 포함할 수 있습니다.</string>
				<key>Title</key>
				<string>고무 오리 메소드</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>색조의 강도(회색톤에서 풀컬러까지)를 말합니다. 이 채도는 `0`과 `1` 사이의 Double(소수점) 값입니다.</string>
				<key>Title</key>
				<string>채도</string>
			</dict>
		</dict>
		<key>scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>값 또는 유형에 접근할 수 있는 프로젝트 영역입니다. [전역 범위](glossary://global%20scope)에 정의된 기호는 [모듈](glossary://module)의 모든 파일에서 접근할 수 있지만 [지역 범위](glossary://local%20scope)에 정의된 기호는 지역 범위와 동일한 레벨 또는 하위 레벨의 코드에서 사용할 수 있습니다.</string>
				<key>Title</key>
				<string>범위</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>센서는 이벤트(열기, 밝기, 사운드 또는 움직임 등의 변화)를 감지하고 값을 반환하는 기기입니다.</string>
				<key>Title</key>
				<string>센서</string>
			</dict>
		</dict>
		<key>sequence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[반복](glossary://iteration)을 사용하여 한 번에 하나씩 처리할 수 있는 값 목록입니다.

`for`-`in` 루프를 사용하여 다음 예제의 `healthySnacks` 배열과 같은 시퀀스를 반복할 수 있습니다.
```
let healthySnacks = ["사과", "배", "바나나"]
for snack in healthySnacks {
	eat(snack)
}
```</string>
				<key>Title</key>
				<string>시퀀스</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱을 만들 때 모든 데이터가 수정되는 단일 위치입니다. 이 데이터에 대한 다른 모든 연결은 참조용일 뿐이며, 해당 정보가 다른 위치에 복제되는 것을 방지합니다. </string>
				<key>Title</key>
				<string>진실 공급원(SOT)</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터가 사람의 목소리를 흉내 내어 만드는 사운드입니다. 일반적으로 텍스트를 따라 생성됩니다.</string>
				<key>Title</key>
				<string>음성 합성</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 시간에 변수, 응용 프로그램 또는 시스템에 저장된 정보입니다. 예를 들어, 변수 `level`에 값 `4`가 포함되어 있으면 현재 상태는 `4`입니다.</string>
				<key>Title</key>
				<string>상태</string>
			</dict>
		</dict>
		<key>state change</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>변수, 응용 프로그램 또는 시스템에 저장되어 있는 정보의 변경 사항입니다. 예를 들어 `level` 변수의 값이 `4`에서 `5`로 변경되면 상태가 변경된 것입니다.</string>
				<key>Title</key>
				<string>상태 변경하기</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>상태 객체를 선언하려면 `@StateObject` [속성 래퍼](glossary://property%20wrapper)를 추가하고, `ObservableObject` [프로토콜](glossary://protocol)에 따라 초기 값을 제공하세요. SwiftUI는 상태 객체에 대한 저장 공간을 관리하고, 게시된 값이 변경될 때마다 해당 값을 사용하는 모든 하위 보기를 업데이트합니다.</string>
				<key>Title</key>
				<string>상태 객체</string>
			</dict>
		</dict>
		<key>state property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>보기의 [속성](glossary://property) 앞에 `@State`를 추가하여 SwiftUI가 값에 대한 저장 공간을 관리하도록 지시합니다. 값이 변경되면 SwiftUI는 해당 값을 사용하는 보기의 모든 부분을 업데이트합니다.

```
@State var isOn = false
```
</string>
				<key>Title</key>
				<string>상태 속성</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI가 값에 대한 저장 공간을 관리하도록 하려면 변수 앞에 `@State`를 추가하세요. 값이 변경되면 SwiftUI는 해당 값을 사용하는 보기의 모든 부분을 업데이트합니다.</string>
				<key>Title</key>
				<string>상태 값</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>응용 프로그램에서 코드를 조직하는 루프 또는 `if` 구문과 같은 구조입니다.</string>
				<key>Title</key>
				<string>구문</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>분리자로 분리된 문자열의 일부 또는 부분열을 말합니다. 예를 들어, `"강아지+고양이+물고기"` 문자열은 `"+"` 분리자로 분리되어 있고 `"강아지"`, `"고양이"`, `"물고기"`를 구성요소로 가집니다.</string>
				<key>Title</key>
				<string>문자열 구성요소</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>문자열 끝에 다른 문자열을 추가하여 문자열을 조합하는 연산 작업입니다. 예를 들어, `"축구"`와 `"공"`을 접합한 결과는 `"축구공"`입니다.</string>
				<key>Title</key>
				<string>문자열 접합</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>문자열을 계산할 때 현재 지정된 값으로 대치되는 긴 문자열 내의 상수, 변수 또는 코드 표현식을 말합니다. 예를 들어, `"영희가 \(fruit)을 먹었다."`라는 문자열에서 `fruit`가 `"복숭아"`라는 값을 가진 변수일 경우, 문자열이 계산될 때 `\(fruit)`은 `"복숭아"`로 대치되어 `"영희가 복숭아를 먹었다."`라는 문자열이 됩니다.</string>
				<key>Title</key>
				<string>문자열 보간</string>
			</dict>
		</dict>
		<key>structure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>구조체는 동일한 유형의 항목 [인스턴스](glossary://instance)를 여러 개 만들 때 청사진처럼 동작하는 코드의 컨테이너입니다. 청사진이 자전거와 같은 객체의 기능과 동작을 정의하듯, 구조체는 이를 [속성](glossary://property)과 [메소드](glossary://method)로 정의합니다.

구조체의 인스턴스를 생성하면 해당 인스턴스에는 청사진에 정의된 모든 속성과 메소드가 포함됩니다. 모든 인스턴스는 동일한 속성과 메소드를 공유하지만 해당 속성 값을 독립적으로 변경할 수 있어서 구조체에서 생성하거나 인스턴스화하는 각 인스턴스를 사용자화할 수 있습니다. 예를 들어 자전거 구조체에 색상 속성이 있으면 빨간색 자전거와 파란색 자전거 모두 만들 수 있습니다.

구조체는 [클래스](glossary://class)와 유사한 개념이지만 두 가지 중요한 차이를 보입니다. 구조체는 [값형](glossary://value%20type)으로 항상 값에 의해 복사되며, 다른 구조체에서 상속받는 것을 지원하지 않습니다.

```
struct Bicycle { 
	var color : Color 
	var type : BikeCategory
}
```</string>
				<key>Title</key>
				<string>구조체</string>
			</dict>
		</dict>
		<key>subview</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[컨테이너](glossary://container) 보기에 포함된 보기입니다. 컨테이너는 여러 개의 하위 보기를 포함할 수 있으며, 각 하위 보기는 또 다른 하위 보기를 포함할 수 있습니다. 보기와 포함된 모든 하위 항목은 [보기 계층](glossary://view%20hierarchy)을 구성합니다.</string>
				<key>Title</key>
				<string>하위 보기</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>컴퓨터가 이해하고 실행할 수 있는 코드 작성 규칙입니다.</string>
				<key>Title</key>
				<string>구문법</string>
			</dict>
		</dict>
		<key>task</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>작업은 앱에서 개별 작업 단위를 처리하는 데 유용하며, 코드가 UI 처리와 같은 중요한 작업을 계속 수행할 수 있게 합니다. 작업을 생성하면 해당 코드가 [비동기식](glossary://asynchronous%20process)으로 프로그램의 일부로 실행됩니다. 이렇게 하면 코드의 나머지 부분이 다른 작업을 수행할 수 있습니다. 이 작업의 데이터가 필요한 코드 부분은 작업의 결과를 `await`할 수 있습니다.</string>
				<key>Title</key>
				<string>작업</string>
			</dict>
		</dict>
		<key>ternary conditional operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>조건 구문을 쓰는 특별한 속기 방식입니다. [연산자](glossary://operator)는 세 부분으로 이루어지며 `condition ? trueValue : falseValue` 형태입니다. 이는 `condition`이 `true`일 때 `trueValue`를 반환하고 `false`일 때 `falseValue`를 반환하는 [`if` 구문](glossary://if%20statement)과 같습니다.

아래 코드에서 `isOn`이 `true`인 경우 직사각형은 녹색입니다. `isOn`이 `false`인 경우 직사각형은 빨간색입니다.

```
Rectangle()
     .foregroundColor(isOn ? .green : .red)
```

위의 코드는 `isOn` 값이 `true`이면 `.green` 값을 반환하고, 그렇지 않으면 `.red` 값을 반환하는 것으로 읽을 수도 있습니다.
</string>
				<key>Title</key>
				<string>세 부분으로 구성된 조건 연산자</string>
			</dict>
		</dict>
		<key>toolbar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>특정 함수를 수행하는 데 사용되는 아이콘의 스트립입니다. 도구 막대 제어자는 보기 모음에 추가하여 제공할 수 있는 도구 막대 항목의 모음을 예상합니다.</string>
				<key>Title</key>
				<string>도구 막대</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>다른 모든 보기가 배치된 보기입니다. [루트 보기](glossary://root%20view)라고도 하는 이 보기는 [보기 계층](glossary://view%20hierarchy)의 상단에 있으며, 계층에 있는 모든 [하위 보기](glossary://subview)에 [컨테이너 보기](glossary://container)처럼 동작합니다.</string>
				<key>Title</key>
				<string>최상위 레벨 보기</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>보기 내의 콘텐츠를 참조할 때 끝 가장자리는 콘텐츠 끝의 수평적 위치를 참조합니다. 끝 가장자리의 위치는 환경설정에 따라 달라지며 일반적으로 지역 및 언어 설정에 따라 달라집니다.
                    예를 들어, 영어나 네덜란드어와 같이 왼쪽에서 오른쪽으로 읽는 언어에서는 끝 가장자리는 오른쪽에 있습니다. 아랍어나 히브리어와 같이 오른쪽에서 왼쪽으로 읽는 언어의 경우 끝 가장자리는 왼쪽에 있습니다.</string>
				<key>Title</key>
				<string>끝 가장자리</string>
			</dict>
		</dict>
		<key>training</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기계 학습에서 기계 학습 알고리즘이 데이터 세트를 학습하는 프로세스입니다. 

지도 학습에서 모델은 데이터 특성과 해당 데이터의 레이블이 서로 가장 정확한 수학적 관계를 갖도록 시도합니다. 비지도 학습에서 모델은 데이터 특성 자체에서 관계를 찾으려고 시도합니다.</string>
				<key>Title</key>
				<string>훈련</string>
			</dict>
		</dict>
		<key>training dataset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[예측](glossary://prediction)을 생성하도록 [훈련](glossary://training)하는 기계 학습 모델의 데이터 모음입니다.</string>
				<key>Title</key>
				<string>훈련 데이터 세트</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>데이터 종류의 특성(기능) 및 메소드(동작)에 대한 이름이 지정된 그룹입니다.

유형은 더 쉽게 접근할 수 있는 관련 기능의 세트를 생성하는 방법입니다.

```
struct Person { 
	var name : Int
	var age : String 

	func greet() { 
		print("Hello, friend!")
	}
}
```</string>
				<key>Title</key>
				<string>유형</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>문자 언어가 읽기 쉽고 흥미롭게 표시되도록 글자체를 정렬하는 기술입니다.</string>
				<key>Title</key>
				<string>타이포그래피</string>
			</dict>
		</dict>
		<key>unwrap</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[선택 사항](glossary://instance) 유형의 [인스턴스](glossary://instance)에서 래핑된 값을 추출합니다. 
				
선택 사항에서 값을 래핑 해제하는 일반적인 방법은 `if`-`let`을 사용하는 것입니다.
```
var count: Int? = 48
if let unwrappedCount = count {
	print(unwrappedCount)
} else {
	print("카운트에 값이 없습니다")
}
```</string>
				<key>Title</key>
				<string>래핑 해제</string>
			</dict>
		</dict>
		<key>upper bound</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[범위](glossary://range%20value)에서 셈을 마치는 끝 값입니다.

```
let closedRange = 1...5 // 하한은 1, 상한은 5
for i in closedRange { 
	print(i) // 1 2 3 4 5
}
```</string>
				<key>Title</key>
				<string>상한</string>
			</dict>
		</dict>
		<key>user</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>앱을 사용하는 사람입니다.</string>
				<key>Title</key>
				<string>사용자</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자와의 상호 작용을 통해 응용 프로그램에게 전달되는 정보입니다. 사용자가 화면을 터치하는 정보나 키보드로 텍스트를 입력하거나 마이크로 음성을 전달하는 것이 이에 해당합니다. 
</string>
				<key>Title</key>
				<string>사용자 입력</string>
			</dict>
		</dict>
		<key>user interaction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[사용자](glossary://user)가 여러분의 앱을 사용하여 수행한 동작입니다. 버튼을 탭하고, 화면을 왼쪽으로 쓸어넘기고, 기기를 회전하고, `ColorPicker`에서 색상을 선택하며, 텍스트 필드에 문자를 입력하는 것이 모두 사용자 상호 작용의 예입니다.</string>
				<key>Title</key>
				<string>사용자 상호 작용</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>사용자가 앱을 제어하는 방법입니다. ‘UI’라고도 부르는 이 용어는 이미지, 텍스트, 버튼, 슬라이더, 스크롤 보기 등의 요소를 통해 사용자가 상호 작용하는 앱의 시각적 부분을 말하는 데 종종 사용됩니다.</string>
				<key>Title</key>
				<string>사용자 인터페이스</string>
			</dict>
		</dict>
		<key>validation dataset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기계 학습 모델의 [훈련 데이터 세트](glossary://training%20dataset)에서 보류된 데이터 샘플입니다. 해당 모델은 유효성 확인 데이터 세트를 사용하여 예측의 정확도를 평가합니다.</string>
				<key>Title</key>
				<string>유효성 확인 데이터 세트</string>
			</dict>
		</dict>
		<key>value type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[구조체](glossary://structure)와 같은 값형의 [인스턴스](glossary://instance)를 생성하면 해당 데이터가 인스턴스 자체에 저장됩니다. 인스턴스를 변수에 [할당](glossary://assignment)하거나 함수에 [인수](glossary://argument)로 전달하면 Swift는 별도의 데이터 복사본을 갖는 새로운 인스턴스를 생성합니다.

인스턴스는 아래 예제와 같이 값에 의해 복사됩니다.

```
struct Bicycle {
  var color: Color
}

var redBike = Bicycle(color: .red)
var blueBike = redBike
blueBike.color = .blue
print(redBike.color) // =&gt; red
print(blueBike.color) // =&gt; blue
// redBike와 blueBike는 각각 자신의 데이터 복사본을 갖습니다.
```</string>
				<key>Title</key>
				<string>값형</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>변경할 수 있는 값을 저장하는 이름이 지정된 컨테이너입니다.

변수는 [정수](glossary://Int), [문자열(String)](glossary://String) 및 [범위](glossary://range)와 같이 다양한 [유형](glossary://type)의 값을 저장할 수 있습니다.  
```
var favoriteNumber = 7 // 정수를 저장합니다.
var greeting = "Hello" // 문자열을 저장합니다.
var repetitions = 1...5 // 범위를 저장합니다.
```</string>
				<key>Title</key>
				<string>변수</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>지정된 방향으로 움직이는 무언가의 속도입니다.</string>
				<key>Title</key>
				<string>속도</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>보기는 앱의 사용자 인터페이스의 기본 요소이며, `View` [프로토콜](glossary://protocol)을 [준수](glossary://conform)하는 모든 시각적 요소를 나타냅니다.

SwiftUI의 보기의 몇 가지 예는 텍스트 보기, 이미지 보기, 슬라이더, 격자, 버튼 및 도형입니다.</string>
				<key>Title</key>
				<string>보기</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>계층 상단에서 최상위 레벨 보기 인스턴스를 참조하여, 다른 보기를 기준으로 보기의 레이아웃을 정의하는 구조입니다. 최상위 레벨 보기는 하위 보기를 얼마든지 포함할 수 있으며, 각각에는 고유한 하위 보기 등이 포함될 수 있습니다.</string>
				<key>Title</key>
				<string>보기 계층</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>음량은 [센서](glossary://sensor)에서 감지하는 소리의 세기를 말합니다. 음량의 범위는 0에서 1 사이입니다.</string>
				<key>Title</key>
				<string>음량</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>주어진 조건이 `true(참)`인 동안 계속 작동하는 코드 블록입니다. 조건이 `false(거짓)`로 변경되는 경우 루프가 작동을 멈춥니다.</string>
				<key>Title</key>
				<string>while 루프</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>퍼즐 세상의 보석, 스위치, 블록과 같은 항목의 윤곽입니다. 와이어프레임은 퍼즐이 실행될 때마다 항목이 임의로 표시될 수 있는지에 대한 가능성을 나타내는 데 사용됩니다.</string>
				<key>Title</key>
				<string>와이어프레임</string>
			</dict>
		</dict>
		<key>yaw</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>기기가 평평한 곳에 놓여 있을 때 기기의 중심점을 중심으로 얼나마 회전했는지 측정한 값입니다.   수학적으로 이는 기기의 z축을 중심으로 한 회전입니다. 이는 라디안으로 측정되며 `-π`에서 `π`의 범위를 갖습니다.</string>
				<key>Title</key>
				<string>요우(yaw)</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
