<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アルファ（アルファチャンネルともいう）は色の不透明度に関わるもので、`0`（完全に透明）から`1`（完全に不透明）までの値を取ります。アルファデータは0から1までのDouble（倍精度浮動小数）です。</string>
				<key>Title</key>
				<string>アルファ</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`true`（真）または`false`（偽）のいずれかの値を持つ型。例えば、`9 &lt; 7`では、`9`は`7`よりも小さくないので、ブール値の`false`（偽）が返されます。
```
var isRunning = false
```</string>
				<key>Title</key>
				<string>ブール値</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>小数部分のある数が入る型（3.14など）。</string>
				<key>Title</key>
				<string>Double（倍精度浮動小数）</string>
			</dict>
		</dict>
		<key>ForEach</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>データの[コレクション](glossary://collection)（配列など）を[反復処理](glossary://iteration)してコレクション内の各要素のビューを作成する構造。

`ForEach`構造では、`ForEach` [初期化子](glossary://initialization)で明示的に、または`Identifiable`（識別可能）プロトコルに準拠することによって、各要素で`id`を提供する必要があります。これにより、SwiftUIで、`ForEach`から生成された各ビューを単独で識別したり、アップデートしたりできます。

```
ForEach(symbols) { symbol in 
    Text(symbol.name)
}
```</string>
				<key>Title</key>
				<string>ForEach</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>整数を入れるための型。整数は、小数点以下を持たない数です（`10`や`-42`など）。</string>
				<key>Title</key>
				<string>Int（整数）</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一連の文字を入れるための型。例えば、`"hello, world"`や`"dancing kittens"`などです。</string>
				<key>Title</key>
				<string>String（文字列）</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appleが開発したプログラミング言語。iPhone、iPad、Mac、Apple Watch、Apple TV向けのAppやアプリケーションを作るために使われます。</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUIは、すべてのAppleプラットフォーム用のユーザインターフェイスを宣言するための最新の手段で、Appのユーザインターフェイスを宣言するためのビュー、コントロール、レイアウト構造を提供します。このフレームワークには、タップ、ジェスチャ、およびAppへのその他の種類の入力を実現するイベントハンドラと、Appのモデルからユーザに表示/操作されるビューやコントロールにいたるまでのデータの流れを管理するツールが用意されています。</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>数から符号を取り除いた値。例えば、-12の絶対値は12で、23.4の絶対値は23.4です。</string>
				<key>Title</key>
				<string>絶対値</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>複雑なものを簡略化したバージョン。  抽象化によって細かいことが隠されるため、コードの断片について考えたり、組み合わせたりしやすくなります。  例えば、[型](glossary://type)は、その型のインタンスの設定、プロパティ、およびメソッドを隠す抽象化です。</string>
				<key>Title</key>
				<string>抽象化</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>デバイスの加速度を上下、前後、左右の3次元で測定するセンサー。

デバイスが平らな面に横向きに置かれているときに、上下の動きによってz軸の加速度が測定され、左右の動きによってy軸の加速度が測定され、前後のモーションによってx軸の加速度が測定されます。</string>
				<key>Title</key>
				<string>加速度計</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロトコルを適用すること。型によって、リストされたメソッドやプロパティなど、プロトコルの要件を実現する、その型独自の一連の実装が提供されます。</string>
				<key>Title</key>
				<string>適用</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>問題を解くための段階的な手順または規則。例えば、お茶を入れるための一連の手順は、アルゴリズムといえます。</string>
				<key>Title</key>
				<string>アルゴリズム</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>何かの末尾に追加すること。例えば、文字列を別の文字列の末尾に追加したり、項目の配列に項目を追加したりできます。
</string>
				<key>Title</key>
				<string>追加</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定のタスクを実行できる、コードでできたソフトウェアです。例えば、“メッセージ”アプリケーション（App）を使って、メッセージを送受信します。</string>
				<key>Title</key>
				<string>アプリケーション</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の動作を変えるために関数に指定する入力値。例えば、`move(distance: 3)`という関数呼び出しでは、`3`の数値の引数で、何マス移動するかを指定しています。</string>
				<key>Title</key>
				<string>引数</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の数値を使って基本的な計算を行うための記号（`+`、`-`、`*`、`/`など）。例えば、`42 / 7`や`17 - 5`には、算術演算子が使われています。</string>
				<key>Title</key>
				<string>算術演算子</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>同じ型の項目を順番に並べて保存するための入れ物。同じ項目を違う場所に入れることもできます。 

以下のコードの場合: `highScores`は[整数](glossary://Int)の配列であり、`greetings`は[文字列](glossary://String)の配列です。
```
let highScores = [37, 34, 29, 29, 26]
let greetings = ["hi", "bye", "good day"]
```</string>
				<key>Title</key>
				<string>配列</string>
			</dict>
		</dict>
		<key>aspect ratio</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>イメージや画面の幅と高さの比率。

例えば、縦横比が2:1のイメージの幅は高さの2倍です。縦横比が1:1のイメージは、幅と高さが同じです。</string>
				<key>Title</key>
				<string>アスペクト比</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アセットは、アプリケーションで使うイメージやサウンドなどの項目です。“ファイル”や“写真”など、ほかのアプリケーションからSwift Playgroundsにアセットを読み込むことができます。</string>
				<key>Title</key>
				<string>アセット</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数または定数の値を設定する操作。</string>
				<key>Title</key>
				<string>代入</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数に値を設定するための記号（`=`）。例えば、`greeting = "hello"`では、`greeting`（挨拶）の値として`"hello"`が設定されます。</string>
				<key>Title</key>
				<string>代入演算子</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appまたはプログラムの残りの部分を実行しながら実行できるコードブロック。完了するまでプログラムの実行がブロックされる同期処理に対し、非同期処理ではAppのコードの残りの部分を同時に実行できます。</string>
				<key>Title</key>
				<string>非同期処理</string>
			</dict>
		</dict>
		<key>asynchronous stream</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>値が、すべて一度に使用することはできないけれど、値のストリームとして一定の間隔で生成される[シーケンス](glossary://sequence)。非同期ストリームを反復処理するときは、それぞれの新しい値を待ってからその値に対して操作を実行する必要があります。				
非同期ストリームは、多くの場合、時間の経過と共に到着するデータに使用されます（例えば、地震やビデオフレームなど）。</string>
				<key>Title</key>
				<string>非同期ストリーム</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`@Binding`[プロパティラッパー](glossary://property%20wrapper)を追加して、データを保存するプロパティと、データを表示したり変更したりするビューとの間の双方向接続を作成します。バインディングでは、データを直接保存するのではなく、プロパティをほかの場所に保存された信頼できる情報源に接続します。

例えば、再生と一時停止を切り替えるボタンでは、`@Binding`プロパティラッパーを使って、[コンテナビュー](glossary://container)のプロパティへのバインディングを作成できます。
</string>
				<key>Title</key>
				<string>バインディング</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[ビュー](glossary://view)の本文。ここでビューの内容を指定します。SwiftUIに用意されている1つ以上の[内蔵ビュー](glossary://built-in%20view)、またはすでに作成したいずれかの[作成済みビュー](glossary://composed%20view)で構成されます。</string>
				<key>Title</key>
				<string>body</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>配列のインデックスに割り当てられる値の範囲。例えば、配列`[17, 42, 95]`では、0から2までのインデックス値が使えます。範囲の確認とは、インデックス値が配列の範囲内であることを確認する処理のことです。</string>
				<key>Title</key>
				<string>範囲</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>カメラに取り込まれた光の量。`0`（光なし）から`1`（光全開）の値を取ります。明るさは`0`から`1`までの[Double](glossary://Double)（倍精度浮動小数）です。</string>
				<key>Title</key>
				<string>明るさ</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションが正しく動かない原因となるコードのミス。
</string>
				<key>Title</key>
				<string>バグ</string>
			</dict>
		</dict>
		<key>built-in view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[SwiftUI](glossary://SwiftUI)フレームワークに用意されている、`Button`、`Text`、`Image`などの[ビュー](glossary://view)。内蔵ビューは、より複雑な[作成済みビュー](glossary://composed%20view)を[ユーザインターフェイス](glossary://user%20interface)に作成するための構築要素として使用されます。</string>
				<key>Title</key>
				<string>内蔵ビュー</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appでは、コードを必要なリソース（データファイル、イメージ、サウンド）と共にバンドルに格納します。各Appにメインバンドルがあり、ほかに名前付きのバンドルがあることもあります。バンドルはディスク上のフォルダで、その中のリソースは明確に定義されたサブフォルダで整理されます。バンドルの構造は、プラットフォームやバンドルの種類によって異なります。</string>
				<key>Title</key>
				<string>バンドル</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コード内での関数の呼び出しは、関数の実行を命令し、関数内で定義されているアクションを行うことを意味します。</string>
				<key>Title</key>
				<string>呼び出し</string>
			</dict>
		</dict>
		<key>callback</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>データを提供したり、実行中に重要なことが起きたことを知らせたりするために、関数またはオブジェクトから呼び出し元を呼び出す必要があることがあります。これは、関数、またはコールバックを行うことができる[委任](glossary://delegate)オブジェクトを渡すことによって実現します。

コールバックは、一般的に[非同期](glossary://asynchronous%20process)プロセスの処理に使用される1つのツールです。</string>
				<key>Title</key>
				<string>コールバック</string>
			</dict>
		</dict>
		<key>chaining</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>それぞれの関数からオブジェクトが返され、今度はそれが次の関数によって操作されるというふうに、一連の[関数](glossary://function)を[呼び出す](glossary://call)ためのテクニック。関数の呼び出しは、1つの文の中でつながっています。
				
例えば、SwiftUIの[修飾子](glossary://modifier)を連鎖させることができます。修飾子は[ビュー](glossary://view)を取得し、何らかの変更を適用して、別のビューを返す[メソッド](glossary://method)だからです。</string>
				<key>Title</key>
				<string>連鎖</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クラスとはコードの入れ物のことで、同じ種類のものの[インスタンス](glossary://instance)をいくつも作って使えるようにする設計図の働きをします。例えば自転車のようなオブジェクトの設計図では、自転車の特徴や動作を定義しますが、同じようにクラスではそれらを[プロパティ](glossary://property)や[メソッド](glossary://method)として定義します。

クラスのインスタンスを作ると、そのインスタンスには設計図で定義されたすべてのプロパティとメソッドが含まれています。すべてのインスタンスは同じプロパティとメソッドを共有していますが、プロパティの値は別々に変更させることができるので、クラスから作った（インスタンス化した）各インスタンスをカスタマイズすることができます。例えば、自転車のクラスに色のプロパティがあった場合、赤い自転車または青い自転車を作ることができます。

クラスは[構造体](glossary://structure)に似ていますが、重要な違いが2点あります。1つは、クラスが[参照型](glossary://reference%20type)である、つまり常に参照によってコピーされる点であり、もう1つは、クラスはその定義を別のクラスから継承できる点です。</string>
				<key>Title</key>
				<string>クラス</string>
			</dict>
		</dict>
		<key>classification</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>機械学習において分類とは、ラベル付けされたデータセットから学習し、その学習結果を用いて新しい観測結果を分類するアルゴリズムのことです。

例えば、犬種分類器は、ラベル付けされた犬種の画像から学習します。この分類器に新しい犬の画像を見せると、この入力をそれらの犬種のいずれかに分類できます。</string>
				<key>Title</key>
				<string>分類</string>
			</dict>
		</dict>
		<key>closed range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>下限から上限までの（上限を含む）の間の区間。

Swiftでは、1〜3の範囲の値は1...3と書くことができます。この場合、範囲には下限の1が含まれ、上限の3までカウントされます。
```
let closedRange = 1...3
for i in closedRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>閉範囲</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クロージャは所定の位置で実行する[関数](glossary://function)で、名前を必要としません。
					
```
scene.setOnStartHandler {
    // クロージャの本文
}
```
                    
クロージャは、それ自体が定義されている環境内にある定数や変数への参照を取り込んで、保存することができます。</string>
				<key>Title</key>
				<string>クロージャ</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードコメントは、プログラマが自分のコードについて説明するためのものです。  “// これはコメントです”のように2つのスラッシュの後ろにスペースを入れることで、1行のコメントを開始できます。  プログラムの実行時にコードコメントは無視されます。</string>
				<key>Title</key>
				<string>コードコメント</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>評価されて値を返すことができるコード。例えば、`months`（月）が12個の項目を含む配列であれば、コード式`months.count - 1`は`11`という値を返します。</string>
				<key>Title</key>
				<string>コード式</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コマンド、コード構造、アルゴリズムを組み立ててアプリケーションを作ること。</string>
				<key>Title</key>
				<string>コーディング</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>複数のデータを入れるために使われる、[配列](glossary://array)や[範囲](glossary://range)などのデータ構造。
```
let heights = [1, 5, 7]
let closedRange = 1...8
```</string>
				<key>Title</key>
				<string>コレクション</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションに特定の操作を実行することを命令するためのコード。</string>
				<key>Title</key>
				<string>コマンド</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コード行を[コードコメント](glossary://code%20comment)に変えて実行されないようにすること。これを行うには、コード行の先頭に`//`を追加します。次に例を示します:
                
`// level.run()`</string>
				<key>Title</key>
				<string>コメントアウト</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つの値を比較するための記号（`==`、`!=`、`&lt;`、`&gt;`、`&lt;=`、`&gt;=`など）。`if`文や`while`ループの条件として、比較の結果がブール値の`true`（真）であるかどうかを調べるためによく使われます。例えば、`6 &gt; 8`では、`6`と`8`が比較されて、`false`（偽）が返されます。</string>
				<key>Title</key>
				<string>比較演算子</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンパイラエラーは、コード内に正しくない記述が含まれていると起こります。左側の余白とツールバー内に赤い点で示されます。</string>
				<key>Title</key>
				<string>コンパイラエラー</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の[内蔵](glossary://built-in%20view)ビューまたは作成済みビューを組み合わせて作成された[ビュー](glossary://view)。
</string>
				<key>Title</key>
				<string>作成済みビュー</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションの小さい部分を組み合わせて、扱いやすく、理解しやすい大きい部分を作る処理。</string>
				<key>Title</key>
				<string>コンポジション</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>演算（足し算や引き算など）と代入（変数に値を設定する操作）を組み合わせた演算子。例えば、`a`の値が`1`の場合、`a += 3`と書くと、`1`に`3`を足した結果が`a`に代入されて、`a`の値は`4`になります。</string>
				<key>Title</key>
				<string>複合代入演算子</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>計算型（コンピューテッド）プロパティでは、値を直接保存するのではなく、取得時に関連するほかの値の現在の状態に基づいて値が計算されます。

以下の例では、areaは計算型プロパティで、`width`と`height`は保存型（ストアド）プロパティです:
```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>計算型プロパティ</string>
			</dict>
		</dict>
		<key>condition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[if文](glossary://if%20statement)などの[条件分岐コード](glossary://conditional%20code)のブロックでは、条件は、ブロックの中のコードが実行されるかどうかを決定する[ブール](glossary://Boolean)値です。  

条件が`true`（真）の場合、コードブロックは実行されます。`false`（偽）の場合、条件分岐コードはスキップされます。
```
let x = 4

if x &lt; 5 { 
	// 条件はtrue（真）で、ifブロック内のコードは実行されます。 
}

if x &gt; 5 { 
	// 条件はfalse（偽）で、ifブロック内のコードは実行されません。 
}
```</string>
				<key>Title</key>
				<string>条件</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>指定した条件に当てはまるときにだけ実行されるコード。例えば、[if文](glossary://if%20statement)や[whileループ](glossary://while%20loop)内のコードは、指定した条件が`true`（真）の場合または`true`（真）の間だけ実行されます。
```
if x &gt; 5 { 
	// コードはxが5より大きい場合のみ実行されます
}
```</string>
				<key>Title</key>
				<string>条件分岐コード</string>
			</dict>
		</dict>
		<key>confidence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>機械学習において信頼度とは、機械学習モデルの[予測](glossary://prediction)が正しい確率のことです。予測の信頼度から、機械学習モデルがどの程度の性能を発揮しているかについての洞察を得ることができます。</string>
				<key>Title</key>
				<string>信頼度</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の型がそのプロトコルの要件を満たす独自の実装を提供する場合、その型はプロトコルに準拠していると言います。</string>
				<key>Title</key>
				<string>準拠</string>
			</dict>
		</dict>
		<key>console</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードを実行しながらコードのデバッグ出力を表示できる場所。コードで`print(_:)`（プリント）を呼び出すと、渡した値がコンソールに表示されます。</string>
				<key>Title</key>
				<string>コンソール</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変更できない値を保存するための、名前の付いた入れ物。</string>
				<key>Title</key>
				<string>定数</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンテナは、中にほかのビューが入るビューです。</string>
				<key>Title</key>
				<string>コンテナ</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>空間内での位置を一意に決定する数の組。例えば、(100, -200)は2次元の空間内での点の座標で、x座標が100、y座標が-200です。</string>
				<key>Title</key>
				<string>座標</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンピュータによって処理または保存される情報。それに対して作用するコードとは別物です。</string>
				<key>Title</key>
				<string>データ</string>
			</dict>
		</dict>
		<key>data cleaning</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>データセットを見直して、不正確なデータ、不完全なデータ、重複しているデータ、不適切な書式のデータを削除または修正するプロセス。

データクリーニングを行うことで、最も適切で正しいデータのみを用いて機械学習モデルを[学習](glossary://training)させ、機械学習モデルの精度を上げることができます。</string>
				<key>Title</key>
				<string>データクリーニング</string>
			</dict>
		</dict>
		<key>data flow</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>App内でのデータの動き、およびそのデータ内の変化によって起こるAppの状態やUIの変化。</string>
				<key>Title</key>
				<string>データフロー</string>
			</dict>
		</dict>
		<key>data model</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>データの編成が反映される、App内で使用されるデータのコード表現。[ユーザインターフェイス](glossary://user%20interface)にデータモデルのデータを表示でき、それを操作することによってデータを変更することができます。データモデルは、Appの[信頼できる情報源](glossary://source%20of%20truth)としての役割を果たします。</string>
				<key>Title</key>
				<string>データモデル</string>
			</dict>
		</dict>
		<key>data separation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appの[データモデル](glossary://data%20model)はデータを表示および操作するために使用する[ユーザインターフェイス](glossary://user%20interface)とは別に定義する必要があるという概念。データの分離により、データモデルとUIをそれぞれ個別に変更でき、Appの動作を理解しやすくなり、Appのテストが容易になります。</string>
				<key>Title</key>
				<string>データの分離</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションが正しく動かない原因となるコードのミスを見つけて直すこと。</string>
				<key>Title</key>
				<string>デバッグ</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーション内に新しいもの（関数、変数、カスタム型など）を作るためのコード。例えば、`let planet = “Earth”`では、`planet`（宇宙）という名前の新しい定数が作られ、その値が`"Earth"`（地球）に設定されます。

以下のコードでは、`AppData`型の`data`（データ）という名前の変数が作られますが、初期値は指定されていません。

```
var data : AppData
```</string>
				<key>Title</key>
				<string>宣言</string>
			</dict>
		</dict>
		<key>decode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>データを効率的な格納形式（JSONなど）からコード内で操作しやすい形式に変換すること。</string>
				<key>Title</key>
				<string>デコード</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>大きい問題を、解きやすいように、いくつかの小さい部分に分けること。</string>
				<key>Title</key>
				<string>分解</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>決まった整数値（多くの場合1）ずつ数を減らすこと。</string>
				<key>Title</key>
				<string>減らす（デクリメント）</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>新しく作成したコード（関数、変数、カスタム型など）の値や動作を指定すること。例えば、関数を定義するときは、その関数で実行する操作を示す一連のコマンドを指定します。</string>
				<key>Title</key>
				<string>定義</string>
			</dict>
		</dict>
		<key>delegate</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>重要なイベントが発生したときに通知を受け取るために別のオブジェクトに提供される特殊なオブジェクト。通常、委任オブジェクトは[プロトコル](glossary://protocol)に準拠し、コードに応答を返すために呼び出すことができる関数を使用します。このような委任関数が呼び出されることを、委任[コールバック](glossary://callback)といいます。

委任は、特に[非同期](glossary://asynchronous%20process)プロセスで、オブジェクト間の通信に使われる一般的なパターンです。</string>
				<key>Title</key>
				<string>委任</string>
			</dict>
		</dict>
		<key>destination view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[ユーザ](glossary://user)が`NavigationStack`または`NavigationSplitView`内の`NavigationLink`（ナビゲーションリンク）をクリックまたはタップしたあとに表示されるビュー。</string>
				<key>Title</key>
				<string>移動先ビュー</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロパティを取り出すときや、インスタンスのメソッドを呼び出すときに使う構文。例えば、`expert.toggleSwitch()`では、`expert`（エキスパート）インスタンスの`toggleSwitch()`（スイッチを切り替える）メソッドが呼び出されます。</string>
				<key>Title</key>
				<string>ドット表記</string>
			</dict>
		</dict>
		<key>edge case</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>予期されるかどうかにかかわらず、まれな状況または操作パラメータの極値で発生する状況。

例えば、iPadのAppを作成する際に、デバイスの言語をアラビア語のような右から左に記述する言語に更新するとAppがクラッシュするようなことです。</string>
				<key>Title</key>
				<string>エッジケース</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードがどのくらい、意図された目的をできるだけ少ないリソース（メモリや電力など）ですばやく実行できるかの尺度。</string>
				<key>Title</key>
				<string>効率</string>
			</dict>
		</dict>
		<key>element</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[配列](glossary:///array)や[範囲](glossary://range)などの[コレクション](glossary://collection)内の項目。

```
let letters = ["a", "b", "c"] // “a”は最初の要素で、”b”は2つ目、”c”は3つ目です。
```</string>
				<key>Title</key>
				<string>要素</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文に含まれる最後のコードブロック。`if`文に含まれるほかのすべての条件が`false`の場合に`else`ブロックが実行されます。

```
if hopper.isFacingStep { 
	// ifブロック
} else if hopper.isFacingUpdraft { 
	// else ifブロック
} else { 
	// elseブロック
}
```</string>
				<key>Title</key>
				<string>elseブロック</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文で、[ifブロック](glossary://if%20block)とそれ以外の`else if`ブロック（ある場合）で調べられなかった条件を調べるためのコードブロック。

```
if hopper.isFacingStep { 
	// ifブロック
} else if hopper.isFacingUpdraft { 
	// else ifブロック
} else { 
	// elseブロック
}
``</string>
				<key>Title</key>
				<string>else ifブロック</string>
			</dict>
		</dict>
		<key>encode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>データをコード内で操作しやすい形式から効率的な格納形式（JSONなど）に変換すること。</string>
				<key>Title</key>
				<string>エンコード</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>同じ仲間の値（ケース）を定義するための型。

 例えば、`Direction`（方向）という列挙は、方位である`north`（北）、`south`（南）、`east`（東）、`west`（西）の4つのケースを定義しています。 
```
enum Direction { 
	case north, south, east, west
}
```
 列挙値を[渡す](glossary://pass%20in)ときは、その中のケースを1つだけ選びます。例えば、次のように書きます:
 ```
 moveIn(direction: .north)
```</string>
				<key>Title</key>
				<string>列挙</string>
			</dict>
		</dict>
		<key>environment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビューのエンバイロメントにより、値の定義済みコレクションにアクセスできるようになります。これらの一部は、システムの状態、ユーザ設定、またはビューの状態を自動的に反映します。例として、ビューのカラースキーム、テキストスタイル、フォーカス状態があります。ほかに、便利なデフォルト値（テキストフィールドの行の制限など）を提供するものもあります。エンバイロメントの値は、`@Environment`[プロパティラッパー](glossary://property%20wrapper)を通じてアクセスすることによって読み込むことができます。エンバイロメントの値の完全なリストは、[here](doc://com.apple.documentation/documentation/swiftui/environmentvalues)（こちら）で確認できます。</string>
				<key>Title</key>
				<string>エンバイロメント</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`@EnvironmentObject`[プロパティラッパー](glossary://property%20wrapper)を追加して、コンテナビューまたは祖先ビューによって提供されるオブザーバブル・オブジェクト・プロパティを宣言します。プロパティを環境オブジェクトとして宣言する場合は、`environmentObject(_:)`修飾子を呼び出して、対応するモデルインスタンスを祖先ビューに設定してください。</string>
				<key>Title</key>
				<string>環境オブジェクト</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンピュータアプリケーションが検出できる操作。ボタンの押下や画面の回転などの入力によってイベントが発生します。</string>
				<key>Title</key>
				<string>イベント</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>イベントが起きた後、そのイベントを処理するために呼び出される関数。</string>
				<key>Title</key>
				<string>イベントハンドラ</string>
			</dict>
		</dict>
		<key>extension</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[クラス](glossary://class)、[構造体](glossary://structure)、[列挙](glossary://enumeration)、[プロトコル](glossary://protocol)など、既存の[型](glossary://type)に新しい機能を追加する方法。

拡張を使うと、既存の型に[メソッド](glossary://method)と[プロパティ](glossary://property)を追加できます。以下のコードでは、`Int`（整数）型に`cubed()`メソッドと`isOdd`プロパティを追加します:

```
extension Int { 
	func cubed() -&gt; Int { 
        return self * self * self
    }
    
    var isOdd : Bool { 
        return self % 2 == 1
    }
}

let two : Int = 2
print(two.cubed()) // 8
print(two.isOdd) // false
```</string>
				<key>Title</key>
				<string>拡張</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コレクションまたはデータ構造に含まれるデータを処理して、データの新しいセットを作り出すこと。</string>
				<key>Title</key>
				<string>フィルタリング</string>
			</dict>
		</dict>
		<key>focus state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビューがユーザ入力（テキストフィールドへの入力など）を受け取れる状態かどうかを表す値。`@FocusState`[プロパティラッパー](glossary://property%20wrapper)を`focused(_:equals:)`修飾子や `focused(_:)`修飾子と一緒に使用すると、ユーザの操作に合わせてフォーカスの値が自動的にアップデートされるビューを作成できます。このビューは、プログラムによって特定のタイミングでフォーカスを合わせたり、外したりすることもできます。</string>
				<key>Title</key>
				<string>フォーカス状態</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定のデザインスタイル、太さ、サイズのテキスト文字セット。フォントのデザインスタイルは書体と呼ばれ、このデザインのバリエーションが集まって書体ファミリーになります。例えば、HelveticaNeueは書体であり、10ポイントのHelveticaNeue-Boldはフォントです。</string>
				<key>Title</key>
				<string>フォント</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の回数だけ繰り返し実行されるコードブロック。

ループは、[範囲](glossary://range%20value)や[配列](glossary://array)などの任意のデータの[コレクション](glossary://collection)を[反復処理](glossary://iterate)し、コレクション内の要素ごとにループブロックを実行します。

以下の例では、ループは、コレクション内の現在の要素の値にアクセスできるようにするループ変数`value`を定義します:
```
for value in 1...4 { 
	byte.moveForward()
	byte.jump(height: value)
}
```</string>
				<key>Title</key>
				<string>forループ</string>
			</dict>
		</dict>
		<key>framework</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>フレームワークは、共有リソースが含まれるディレクトリです。これらのリソースには、ソースファイル、イメージファイル、各国語に対応した文字列、参考ドキュメントなどを1つのパッケージにまとめて含めることができます。複数のアプリケーションでこれらのリソースを同時に使用できます。共有リソースは必要に応じてシステムに読み込まれ、可能な限り、リソースの1つのコピーがすべてのアプリケーションに共有されます。</string>
				<key>Title</key>
				<string>フレームワーク</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の完全な名前。`move(to:duration:)`のように、コロン（`:`）で区切られたパラメータの名前が含まれます。</string>
				<key>Title</key>
				<string>完全な関数名</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>名前で[呼び出され](glossary://call)たときに実行される、名前付きのコードブロック。[パラメータ](glossary://parameter)の形でデータが渡され、コードの実行完了時にデータを[返す](glossary://return)ことができます。型の中で定義される関数は、[メソッド](glossary://method)と呼ばれます。

以下は、`turnRight()`関数定義の例です。`turnRight()`を書いて、この関数を呼び出してみましょう。コードが実行され、`turnLeft()`が3回実行されます。

```
func turnRight() { 
	turnLeft()
	turnLeft()
	turnLeft()
}
```</string>
				<key>Title</key>
				<string>関数</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の定義には、その関数が何を行うか、何を受け取る必要があるか、完了時に何を返すかを記述します。</string>
				<key>Title</key>
				<string>関数の定義</string>
			</dict>
		</dict>
		<key>fuzzy autocomplete</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードを自動入力するためのメソッド。文字列のあいまい検索を実行して、一致する変数、定数、型、およびその他のシンボルを検索します。文字列のあいまい検索は完全ではありませんが、入力した文字に基づいて関連する一致が検索されます。

例えば、“scale”（拡大/縮小）を伴う何かを行う[ビュー修飾子](glossary://modifier)を検索する場合は、“.scale”と入力し始めるだけで“.scale”で始まる自動入力候補（`.scaledToFill`や`.scaleEffect`など）が返されますが、さらに`.imageScale`や`.grayscale`などの“あいまい”一致も返されます。
</string>
				<key>Title</key>
				<string>あいまい自動入力</string>
			</dict>
		</dict>
		<key>g</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>加速度、または単位質量にかかる力を表す単位。1g（1g力）は地球の重力加速度に相当し、約9.8メートル毎秒毎秒です。</string>
				<key>Title</key>
				<string>g</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロジェクト内のどのファイルからでもアクセスできる関数。</string>
				<key>Title</key>
				<string>グローバル関数</string>
			</dict>
		</dict>
		<key>global scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>同じ[モジュール](glossary://module)内のどのソースファイルのコードからでもアクセス可能なシンボル。ソースファイルの最上位で定義するインスタンス、型、または関数には、デフォルトでグローバルスコープがあります。</string>
				<key>Title</key>
				<string>グローバルスコープ</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロジェクト内のどのファイルからでもアクセスできる変数。</string>
				<key>Title</key>
				<string>グローバル変数</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>白から黒までのグレイの濃淡の範囲。</string>
				<key>Title</key>
				<string>グレイスケール</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>デバイスの向きを、前から後ろへの傾き、左から右への傾き、中心を基準にした回転の3次元で測定するセンサー。</string>
				<key>Title</key>
				<string>ジャイロスコープ</string>
			</dict>
		</dict>
		<key>half open range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>下限から上限までの（ただし上限を含まない）半開区間。

Swiftでは、範囲1〜3の値は1..&lt;4として書くことができます。この場合、範囲には下限の1が含まれ、値4までカウントされますが、値4は含まれません。
```
let halfOpenRange = 1..&lt;4
for i in halfOpenRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>半開範囲</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ヘルツ（Hz）は1秒間に1回のサイクルを意味し、音の振動の文脈では、1 Hzは1秒間に1回振動する音波のことを表します。人間は20 Hzから16,000 Hzの音を聞き取れます。</string>
				<key>Title</key>
				<string>ヘルツ</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>カラーホイール上の色の色調。`0`から`1`までのDouble（倍精度浮動小数）です。</string>
				<key>Title</key>
				<string>色相</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文に含まれる最初のコードブロック。`if`ブロックは、`if`文の条件が`true`（真）の場合に実行されます。
```
if blu.isFacingStep { 
	blu.jump()
}
```</string>
				<key>Title</key>
				<string>ifブロック</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の条件の値に基づいてコードを実行するために使用するコード構造。`if`文内の最初のコードブロックが`if`ブロックです。
```
if blu.isFacingStep { 
	blu.jump()
}
```
 `if`文には、追加のチェックを提供する`else if`ブロックや`else`ブロックなどのブロックが含まれることもあります。
```
if blu.isFacingStep { 
	blu.jump()
} else if blu.isFacingHole { 
	blu.shapeShift(into: .bridge)
} else { 
	blu.moveForward()
}
```</string>
				<key>Title</key>
				<string>if文</string>
			</dict>
		</dict>
		<key>import</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Swiftで`import` [宣言](glossary://declaration)を使うと、現在のファイルの外で定義されたシンボル（型、関数、プロパティ、メソッドなど）にアクセスできます。[モジュール](glossary://module)または[SwiftUI](doc://com.apple.documentation/documentation/swiftui)や[CoreMotion](doc://com.apple.documentation/documentation/coremotion)などの[フレームワーク](glossary://framework)のシンボルを読み込むことができます。例えば、SwiftUIフレームワークを使用するには、以下の宣言をファイルの上部に置きます: 

```
import SwiftUI
```
</string>
				<key>Title</key>
				<string>読み込む</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>決まった整数値（多くの場合1）ずつ数を増やすこと。</string>
				<key>Title</key>
				<string>増やす（インクリメント）</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[配列](glossary://array)内での各項目の位置を示す番号。</string>
				<key>Title</key>
				<string>インデックス</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>配列の範囲を超えるインデックスを使って配列内の項目を取り出そうとするときに起こるエラー。例えば、`[17, 42]`という配列では、インデックス`2`は範囲外になります。</string>
				<key>Title</key>
				<string>インデックスの範囲外エラー</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の型の新しいインスタンスを作ること。同時に、その型のプロパティに初期値を設定することもあります。</string>
				<key>Title</key>
				<string>初期化</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>型の新しい[インスタンス](glossary://instance)を作成する時に初期化子を呼び出します。初期化子では、型のすべてのプロパティに初期値があることを確認する必要があります。また、多くの場合、初期化子にはほかの設定コードも含まれます。</string>
				<key>Title</key>
				<string>初期化子</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>別の（外側の）ループ（繰り返し実行されるコードブロック）に含まれるループ。</string>
				<key>Title</key>
				<string>内側のループ</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の[型](glossary://type)の値。例えば`let motion = MotionSensor()`では、`motion`（モーション）は`MotionSensor`（モーションセンサー）型のインスタンスです。</string>
				<key>Title</key>
				<string>インスタンス</string>
			</dict>
		</dict>
		<key>integer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>整数（`2`や`-5`など）。</string>
				<key>Title</key>
				<string>整数</string>
			</dict>
		</dict>
		<key>iterate</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[コレクション](glossary://collection)内のすべての[要素](glossary://element)（配列や範囲など）にコードブロックを繰り返すこと。

以下の例では、forループは`days`配列を反復処理して、一度に1つの曜日を出力します:
```
let days = ["Monday", "Tuesday", "Wednesday"]

for value in days { 
	print(value)
}

// 最初の反復処理: "Monday"を出力します
// 2つ目の反復処理: "Tuesday"を出力します
// 3つ目の反復処理: "Wednesday"を出力します
```</string>
				<key>Title</key>
				<string>反復処理</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の処理を繰り返すこと。例えば、配列内の各項目に同じ操作をするなどです。</string>
				<key>Title</key>
				<string>反復処理</string>
			</dict>
		</dict>
		<key>label</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[ビュー](glossary://view)として作成される、UI要素の視覚的な表示。

SwiftUIの多くの[内蔵ビュー](glossary://built-in%20view)には、ラベル（視覚的な表示）とその他のカスタマイズポイント（`NavigationLink`（ナビゲーションリンク）の[移動先ビュー](glossary://destination%20view)や`Button`（ボタン）のアクション[コールバック](glossary://callback)など）の両方があります。</string>
				<key>Title</key>
				<string>label</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>処理要求、処理能力、またはその両方の結果としてAppの速度や応答性が低下すること。</string>
				<key>Title</key>
				<string>lag</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビュー内のコンテンツに関連して使用される場合、先頭のエッジとは、コンテンツの横方向の開始位置のことをいいます。先頭のエッジの位置は環境設定によって異なり、通常は地域と言語に基づきます。
                    例えば、英語やオランダ語のように左から右へと読む言語では、先頭のエッジは左側です。アラビア語やヘブライ語のように右から左へと読む言語では、先頭のエッジは右側です。</string>
				<key>Title</key>
				<string>先頭のエッジ</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>リテラルでは、イメージライブラリやカラーピッカーを使ってイメージやカラーを直接コードに埋め込むことができます。リテラルはデータの実際の値をそのまま表したもので、エディタ内で直接記述されます。</string>
				<key>Title</key>
				<string>リテラル</string>
			</dict>
		</dict>
		<key>local scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ローカルスコープは、[グローバルスコープ](glossary://global%20scope)の下の、コード編成の新しいレベルにできます。例えば、新しい[型](glossary://type)によって新しいローカルスコープができ、その型の中の関数やコードブロックごとに独自レベルの[スコープ](glossary://scope)ができます。このスコープは、シンボルが宣言される場所に基づき、同じレベルまたは下位レベルのスコープにあるコードからのみアクセスできます。

例えば、型によって変数が定義されている場合、その変数はその型の中のすべての関数およびコードブロックでアクセスできます。ただし、メソッドによって定義されている定数は、メソッドの定義内でのみアクセスできます。</string>
				<key>Title</key>
				<string>ローカルスコープ</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つのブール値が両方とも`true`（真）であれば全体を`true`とみなすための記号（`&amp;&amp;`）。例えば、`a &amp;&amp; b`は、`a`と`b`の両方が`true`の場合にのみ、`true`になります。</string>
				<key>Title</key>
				<string>論理AND演算子</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードのブール値を逆にするための記号（`!`）。例えば、`a`が`true`（真）の場合、`!a`は`false`（偽）になります。</string>
				<key>Title</key>
				<string>論理NOT演算子</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つのブール値の少なくとも一方がtrue（真）であれば全体をtrueとみなすための記号（||）。例えば`a || b`は、`a`または`b`のどちらか（あるいは両方）が`true`であれば、`true`になります。</string>
				<key>Title</key>
				<string>論理OR演算子</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ブール論理値である`true`（真）と`false`（偽）を逆にしたり組み合わせたりするための記号（`&amp;&amp;`、`||`、`!`など）。</string>
				<key>Title</key>
				<string>論理演算子</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の回数だけ繰り返し実行されるコードブロック（`for`ループなど）、または、条件が当てはまる間は繰り返し実行されるコードブロック（`while`ループなど）。</string>
				<key>Title</key>
				<string>ループ</string>
			</dict>
		</dict>
		<key>loop variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[forループ](glossary://for%20loop)では、反復処理している[コレクション](glossary://collection)内の現在の要素の値。

ループ変数にはこの値が保存されて、`for`ループの本体で使えます。 

次の例では、`value`と`letter`がループ変数です:
```
for value in 1...4 { 
	print(value) // 1 2 3 4
}

for letter in ["c", "o", "d", "e"] { 
	print(letter) // c o d e 
}
```</string>
				<key>Title</key>
				<string>ループ変数</string>
			</dict>
		</dict>
		<key>lower bound</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[範囲](glossary://range)内で、カウントアップの開始値。

```
let closedRange = 1...5 // 下限は1で、上限は5です
for i in closedRange { 
	print(i) // 1 2 3 4 5
}
```</string>
				<key>Title</key>
				<string>下限</string>
			</dict>
		</dict>
		<key>machine learning</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンピュータサイエンスの一分野。大量のデータを使用して機械に学習方法を教え、特定のプロセスを改善する[アルゴリズム](glossary://algorithm)の開発を中心とします。

例えば、画像[分類器](glossary://classification)を使用して、花の画像の大規模データセットを提供することによって、特定の種類の花を認識するように機械に教えることができます。</string>
				<key>Title</key>
				<string>機械学習</string>
			</dict>
		</dict>
		<key>machine learning model</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>機械学習の[アルゴリズム](glossary://algorithm)を[学習データセット](glossary://training%20dataset)に適用して作成される[データモデル](glossary://data%20model)の一種。機械学習モデル（MLモデル）は、入力されたソースから[予測](glossary://prediction)を行うために使用されます。</string>
				<key>Title</key>
				<string>機械学習モデル</string>
			</dict>
		</dict>
		<key>magnitude</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>正か負かに関係ない値のサイズ。数値の[絶対値](glossary://absolute%value)とも呼ばれます。

例えば、`5`と`-5`のマグニチュードはどちらも`5`です。</string>
				<key>Title</key>
				<string>マグニチュード</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションのコードとそこで使われるデータが一時的または恒久的に保存されるコンピュータの部分。</string>
				<key>Title</key>
				<string>メモリ</string>
			</dict>
		</dict>
		<key>metadata</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>データに関する補足情報。例えば、写真には撮影場所に関するメタデータを含めることができます。</string>
				<key>Title</key>
				<string>メタデータ</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>名前で[呼び出され](glossary://call)たときに実行される、名前付きのコードブロック。

メソッドは[関数](glossary://function)ですが、[型](glossary://type)内で定義されます。

このコードは、`byte`という[インスタンス](glossary://instance)からメソッド、`moveForward()`を呼び出します:
```
let byte = Byte()

byte.moveForward()
```</string>
				<key>Title</key>
				<string>メソッド</string>
			</dict>
		</dict>
		<key>miter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>幅のある2本の線をつないだときに、つなぎ目の角が鋭くなるスタイル（丸い角や面取りされた角ではなく）。</string>
				<key>Title</key>
				<string>マイター</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUIでは、修飾子はビューの外観または動作を変更するために使います。

					以下のコードでは、`foregroundColor`修飾子を使って`Rectangle`ビューのカラーを青に変更しています。
					```
					Rectangle()
							.foregroundColor(.blue)
					```

					修飾子を読みやすくするために、各修飾子は、変更するビューの下に、1つにつき1行ずつ記述します。この例では、`foregroundColor(.blue)`修飾子が最初に適用されて、そのあとに`border(.green)`が続きます。
					```
					Rectangle()
							.foregroundColor(.blue)
							.border(.green)
					```
					
					修飾子は上から順番に適用されるので、配置を入れ替えると、生成されるビューの外観や動作が変わる可能性があります。
				</string>
				<key>Title</key>
				<string>修飾キー</string>
			</dict>
		</dict>
		<key>modularity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appを個々の部分に分割するという原則。それぞれの部分にAppの機能の一部分（インターフェイスの一部分を表示する、Appのデータを格納するなど）を実行するために必要なすべてのものが含まれます。

モジュール性は、App作成の重要な原則です。機能の個々の部分を理解したり、操作したりしやすくなるためです。これにより、Appに不具合がある場合に、問題のある場所を検出しやすくなります。</string>
				<key>Title</key>
				<string>モジュラー</string>
			</dict>
		</dict>
		<key>module</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コード配布の1つの単位。1つの単位として構築および出荷され、Swiftの[読み込み](glossary://import)キーワードを使って別のモジュールで読み込める[フレームワーク](glossary://framework)またはアプリケーション。</string>
				<key>Title</key>
				<string>モジュール</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つの値を別の値で割った後の余りを返す記号（`%`）。例えば、`17 % 5`は`2`を返します。</string>
				<key>Title</key>
				<string>モジュロ演算子</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>移動先に到達するまで1画面につき1つを選択できるナビゲーションインターフェイス。別の移動先に移動するには、それまでのステップを引き返すか、最初からやり直して、別の選択をする必要があります。画面の上部にあるナビゲーションバーには、現在の位置が分かるようにタイトルが表示され、戻るボタンが表示されるので、前の画面に戻ることができます。</string>
				<key>Title</key>
				<string>ナビゲーションバー</string>
			</dict>
		</dict>
		<key>navigation link</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ユーザにタップされたときに[移動先ビュー](glossary://destination%20view)に移動するためのSwiftUIの[内蔵ビュー](glossary://built-in%20view)。ナビゲーションリンクには、視覚的な外観を決定する[ラベル](glossary://label)もあります。</string>
				<key>Title</key>
				<string>ナビゲーションリンク</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>繰り返し実行されるコードブロック（ループなど）の中に別のコードブロックを入れること。</string>
				<key>Title</key>
				<string>ネスト</string>
			</dict>
		</dict>
		<key>normalization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>スケーリング後の値が`0`〜`1`になるように一連のデータをスケーリングするプロセス。</string>
				<key>Title</key>
				<string>正規化</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クラスが`ObservableObject`プロトコルに[準拠](glossary://conform)している場合、公開値が変わると、それらの値を使用しているすべてのビューが自動的にアップデートされて、変更が反映されます。</string>
				<key>Title</key>
				<string>オブザーバブルオブジェクト</string>
			</dict>
		</dict>
		<key>observe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>オブジェクトの[状態の変化](glossary://state%20change)を監視すること。</string>
				<key>Title</key>
				<string>監視</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[ビュー](glossary://view)内で、SwiftUIによって、`@ObservedObject`[プロパティラッパー](glossary://property%20wrapper)を使用している[プロパティ](glossary://property)の変化が監視されます。値が変わると、ビューが更新されます。

オブザーブド・オブジェクト・プロパティの型は、`ObservableObject`プロトコルに[準拠](glossary://conform)する必要があります。
				</string>
				<key>Title</key>
				<string>オブザーブドオブジェクト</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[オブザーバブルオブジェクト](glossary://observable%20object)に関する場合、オブザーバはオブザーバブルオブジェクトのデータを使用するビューまたはオブジェクトです。オブザーバブルオブジェクトのデータが変わると、SwiftUIによって変更が認識され、アップデートするようにオブザーバに指示されます。</string>
				<key>Title</key>
				<string>オブザーバ</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の値を使って操作を行うための記号（`+`、`-`、`&amp;&amp;`など）。例えば、`1 + 2`では、加算演算子（`+`）によって、数字の`1`と`2`が足し算されます。</string>
				<key>Title</key>
				<string>演算子</string>
			</dict>
		</dict>
		<key>optional</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ラップされた値、または値がないことを表す型。通常、オプショナル型は末尾に疑問符（`?`）を付けることによって示されます。
				
例えば、型`Int?`の変数には`-43`や`6`のラップされた`Int`（整数）値が含まれる場合があります。または、値が`nil`の場合もあります。その場合、値は代入されていません。</string>
				<key>Title</key>
				<string>任意</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>別の（内側の）ループ（繰り返し実行されるコードブロック）を含むループ。</string>
				<key>Title</key>
				<string>外側のループ</string>
			</dict>
		</dict>
		<key>overfitting</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>機械学習において、特定のデータセットに対応しすぎるモデルを作成してしまうこと。

例えば、哺乳類の画像を検出する[分類器](glossary://classification)がモデルの場合、[学習データセット](glossary://training%20dataset)に犬の画像しか含まれていなければ、ウサギやシカなどほかの哺乳類を無視して犬を認識するようにモデルが過剰に適合してしまいます。</string>
				<key>Title</key>
				<string>過適合</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[関数](glossary://function)の動作のカスタマイズに使用する値。関数を[呼び出す](glossary://call)ときに、さまざまな値を渡してその動作を変更できます。

以下の関数では、`distance`（距離）は`Int`（整数）型の値を受け取るパラメータです:
```
func move(distance: Int) { 
	for i in 1...distance { 
		moveForward()
	}
}
```
パラメータ値（`distance`（距離））は、関数の本体で使用して、関数の動作に影響を与えることができます。この場合、`move(distance: 2)`や`move(distance: 5)`などの別の整数値でこの関数を呼び出して、別の距離を移動することができます。</string>
				<key>Title</key>
				<string>パラメータ</string>
			</dict>
		</dict>
		<key>pass in</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の[パラメータ](glossary://parameter)のいずれかに値を提供すること。

以下の例では、コードは`text`パラメータに値”Hello”を渡します。
```
speak(text: "Hello")
```</string>
				<key>Title</key>
				<string>渡す</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一連の状況やデータの繰り返し。</string>
				<key>Title</key>
				<string>パターン</string>
			</dict>
		</dict>
		<key>persistence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ユーザデータを保存して、Appが起動するたびに再読み込みできるようにするプロセス。保持機能がなければ、Appの状態とデータはAppが再起動するたびにリセットされます。</string>
				<key>Title</key>
				<string>保持</string>
			</dict>
		</dict>
		<key>pi</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>円周率（π）は、約3.14に等しい数学定数で、円の円周と直径の比率です。</string>
				<key>Title</key>
				<string>円周率</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>デバイスが横向きのときの、デバイスの左右の回転または傾きの単位。  数学的には、デバイスのx軸を軸とした回転です。単位はラジアンで、範囲は`-π/2`〜`π/2`です。</string>
				<key>Title</key>
				<string>ピッチ</string>
			</dict>
		</dict>
		<key>pitch audio</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>音のピッチは音波の振動数で決まります。一定の時間内に発生する音波の数が多いほど、ピッチは高くなります。

					音楽では、ピッチは音が”低い”か”高い”かを表します。例えば、鳥の鳴き声は高いピッチで記録され、ライオンのうなり声は低いピッチの音を作ります。</string>
				<key>Title</key>
				<string>ピッチ</string>
			</dict>
		</dict>
		<key>placeholder view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>最終的にコンテンツが読み込まれるか入力される場所を示すために一時的に表示されるビュー。例えば、`ProgressView`を使用してイメージが読み込み中であることを示したり、グレー表示の長方形を使用してテキストを入力できることを示したりします。</string>
				<key>Title</key>
				<string>プレースホルダビュー</string>
			</dict>
		</dict>
		<key>prediction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>機械学習において予測とは、機械学習モデルに入力を与えたときの出力のことです。

例えば、さまざまな犬種を認識するように学習した機械学習モデルから出力されうる予測としては、ゴールデンレトリバーがあります。</string>
				<key>Title</key>
				<string>予測</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>privateキーワードを使用した場合は、コードはその特定のソースファイルでのみ利用できます。
- callout(例):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[型](glossary://type)内で定義された変数（値を保存するための、名前の付いた入れ物）。

プロパティには、[ドット表記](glossary://dot%20notation)を使って、型の[インスタンス](glossary://instance)を介してアクセスできます。以下の例では、`isFacingHole`は`Hopper`型のプロパティです。
```
if hopper.isFacingHole { 
	// code 
}
```</string>
				<key>Title</key>
				<string>プロパティ</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロパティラッパーは、動作の一般的なパターンをプロパティに適用するための簡単な手段です。このラッパーは、プロパティがどのように保存されるか、または読み込み時に計算されるかの定義を注釈付けする1つの方法です。  例えば、`@State`プロパティラッパーは、格納されている値を管理するように、および値が変わったらその値を使用しているビューの部分をアップデートするようにSwiftUIに指示します。</string>
				<key>Title</key>
				<string>プロパティラッパー</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>クラス、構造体、列挙などの型で適用できる（従う）メソッドやプロパティなどの一連の要件。  型でプロトコルを適用すると、その型独自のプロトコル要件の実装が提供され、その型はそのプロトコルに準拠していると言われます。</string>
				<key>Title</key>
				<string>プロトコル</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アルゴリズムを読みやすく説明したもの。たいていは、ふだん使う言葉とコードの両方を組み合わせて書きます。</string>
				<key>Title</key>
				<string>疑似コード</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>publicキーワードを使用した場合は、コードはプロジェクト内の任意のファイルで利用できます。
                        
 - callout(例):
`public func decorateWithSticker(space: Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>publish</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の[公開型プロパティ](glossary://published%20value)の値が変わったときに、[オブザーバブルオブジェクト](glossary://observable%20object)のすべての[オブザーバ](glossary://observer)に通知をブロードキャストすること。</string>
				<key>Title</key>
				<string>公開</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`@Published`[プロパティラッパー](glossary://property%20wrapper)を追加して、値が変わる直前にすべての[オブザーバ](glossary://observer)に通知するプロパティを宣言します。値が変わると、そのデータを使用するすべてのビューがSwiftUIによってアップデートされます。</string>
				<key>Title</key>
				<string>公開値</string>
			</dict>
		</dict>
		<key>radians</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ラジアンは、度のような角度の単位です。ラジアンでの角度は、その角度を軸として描かれた円の弧の長さと半径の比率と同じです。1ラジアンは180度÷[円周率](glossary://pi)に相当します。</string>
				<key>Title</key>
				<string>ラジアン</string>
			</dict>
		</dict>
		<key>range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[下限](glossary://lower%20bound)と[上限](glossary://upper%20bound)の間の区間。

[閉範囲](glossary://closed%20range)や[半開範囲](glossary://half%20open%20range)を含む範囲を作成する方法は複数あります。

```
let closedRange = 1...4 
for i in closedRange { 
	print(i) // 1 2 3 4
}

let halfOpenRange = 1..&lt;4 
for i in halfOpenRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>範囲</string>
			</dict>
		</dict>
		<key>reference type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>参照型の[インスタンス](glossary://instance)（クラスやactorなど）を作成すると、そのデータは共有メモリに保存されます。その結果インスタンスには、データの一意なコピーではなく、データへの参照のみが含まれます。そのインスタンスを変数に[代入](glossary://assignment)するか、関数への[引数](glossary://argument)として渡すと、同じデータへの別の参照が作成されます。

以下の例のように、インスタンスは参照によってコピーされます:

```
class Bicycle {
  var color: Color
   init(color: Color) {
     self.color = color
   }
}

var redBike = Bicycle(color: .red)
var blueBike = redBike
blueBike.color = .blue
print(redBike.color) // =&gt; blue
print(blueBike.color) // =&gt; blue
// redBike and blueBike share a reference to the same data
```</string>
				<key>Title</key>
				<string>参照型</string>
			</dict>
		</dict>
		<key>responsive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードまたはユーザインターフェイスが[ユーザの操作](glossary://user%20interaction)に素早く反応する場合、または環境の変化（ビューのサイズの変化など）に適応する場合、そのコードまたはユーザインターフェイスはレスポンシブです。</string>
				<key>Title</key>
				<string>レスポンシブ</string>
			</dict>
		</dict>
		<key>return</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[関数](glossary://function)の呼び出し側に値を送り返すこと。例えば、配列`[0,1,2]`で関数`contains(3)`を実行すると、この配列には値`3`が含まれていないためブール値`false`(偽)が返されます。</string>
				<key>Title</key>
				<string>戻る</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数を定義するときに、必要に応じて、関数が完了時に出力として返す値の型（戻り値の型といいます）を定義できます。</string>
				<key>Title</key>
				<string>戻り値の型</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーション内のさまざまな場所で利用できるというコードの特性。</string>
				<key>Title</key>
				<string>再利用可能</string>
			</dict>
		</dict>
		<key>roll</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>デバイスが横向きのときの、デバイスの前後の回転または傾きの単位。  数学的には、デバイスのy軸を軸とした回転です。単位はラジアンで、範囲は`-π`〜`π`です。</string>
				<key>Title</key>
				<string>ロール</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>その他のすべてのビューが置かれるビュー。このビューは[最上位ビュー](glossary://top-level%20view)とも呼ばれ、[ビュー階層](glossary://view%20hierarchy)の一番上にあり、階層内のすべての[サブビュー](glossary://subview)に対する[コンテナビュー](glossary://container)の役割を果たします。</string>
				<key>Title</key>
				<string>ルートビュー</string>
			</dict>
		</dict>
		<key>rubber ducky method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ラバーダック（ゴム製のアヒル）など、無生物の物に概念を詳しく説明する学習法。このテクニックを実践するには、無生物の物を入手し、概念を大きな声で説明を始めて、アヒルが理解するのに必要なすべての情報が含まれているかどうか確認します。説明中に情報が不足していることに気付いたら、メモしておいて、あとで調べます。新たに分かったことは、その後のラバーダックへの説明に含めることができます。</string>
				<key>Title</key>
				<string>ラバーダック法</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>鮮やかさの尺度。最小値は無彩色で、最大値は純色です。彩度は`0`から`1`までのDouble（倍精度浮動小数）です。</string>
				<key>Title</key>
				<string>彩度</string>
			</dict>
		</dict>
		<key>scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>値または型にアクセスできるプロジェクトの領域。[グローバルスコープ](glossary://global%20scope)で定義されるシンボルは[モジュール]内のどのファイルからでもアクセス(glossary://module)できますが、[ローカルスコープ](glossary://local%20scope)で定義されるシンボルは、ローカルスコープと同じレベルまたは下位レベルにあるコード内で使用できます。</string>
				<key>Title</key>
				<string>スコープ</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>事象（熱、光、音、動きなどの変化）を感知して値を返す装置。</string>
				<key>Title</key>
				<string>センサー</string>
			</dict>
		</dict>
		<key>sequence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[反復処理](glossary://iteration)を使って一度に1つずつ処理できる値のリスト。

`for`-`in`ループを使って、以下の例の`healthySnacks`配列などのシーケンスを反復処理できます。
```
let healthySnacks = ["apple", "pear", "banana"]
for snack in healthySnacks {
	eat(snack)
}
```</string>
				<key>Title</key>
				<string>シーケンス</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appの作成において、すべてのデータが変更される唯一の場所。ほかの場所で情報が重複しないように、このデータへのほかのすべての接続はすべて参照専用になります。</string>
				<key>Title</key>
				<string>信頼できる情報源</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>人間の声に似たサウンドをコンピュータが作ること。通常はテキストから生成されます。</string>
				<key>Title</key>
				<string>音声合成</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数、アプリケーション、またはシステムに、特定の時点で保存されている情報。例えば、変数`level`に`4`の値が含まれている場合、その変数の現在の状態は`4`です。</string>
				<key>Title</key>
				<string>状態</string>
			</dict>
		</dict>
		<key>state change</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数、アプリケーション、またはシステムに格納されている情報の変化。例えば、変数`level`の値が`4`から`5`に変わると、変数の状態が変わります。</string>
				<key>Title</key>
				<string>状態の変化</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`@StateObject`[プロパティラッパー](glossary://property%20wrapper)を追加して、状態オブジェクトを宣言し、`ObservableObject`[プロトコル](glossary://protocol)に準拠する初期値を提供します。SwiftUIによって、状態オブジェクトに格納されている値が管理され、公開値が変わるたびに、その値を使用するすべてのサブビューがアップデートされます。</string>
				<key>Title</key>
				<string>状態オブジェクト</string>
			</dict>
		</dict>
		<key>state property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビューの[プロパティ](glossary://property)の前に`@State`を追加して、格納されている値を管理するようにSwiftUIに指示します。値が変わると、その値を使用するビューのすべての部分がSwiftUIによってアップデートされます。

```
@State var isOn = false
```
</string>
				<key>Title</key>
				<string>状態プロパティ</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数の前に`@State`を追加して、格納されている値を管理するようにSwiftUIに指示します。値が変わると、その値を使用するビューのすべての部分がSwiftUIによってアップデートされます。</string>
				<key>Title</key>
				<string>状態値</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションのコードを分類するための構造（ループや`if`文など）。</string>
				<key>Title</key>
				<string>命令文</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>文字列を区切り文字で複数の部分に分割した後の各部分（部分文字列）。例えば、文字列`"dog+cat+fish"`を区切り文字`"+"`で分割した場合、その構成要素は`"dog"`、`"cat"`、`"fish"`という文字列になります。</string>
				<key>Title</key>
				<string>文字列コンポーネント</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つの文字列を別の文字列の最後に追加して文字列を結合する操作。例えば、`"foot"`と`"ball"`を連結すると`"football"`になります。</string>
				<key>Title</key>
				<string>文字列結合</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>長い文字列の中で、その文字列を評価したときに現在の値に置き換わる定数、変数、またはコード式を使用すること。例えば、文字列`"Katy ate a \(fruit)."`で`fruit`（果物）が`"peach"`（桃）という値を持つ変数の場合、文字列が評価されると`\(fruit)`が`"peach"`に置き換わり、`"Katy ate a peach."`（ケイティは桃を食べた）になります。</string>
				<key>Title</key>
				<string>文字列補間</string>
			</dict>
		</dict>
		<key>structure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>構造体とはコードの入れ物のことで、同じ種類のものの[インスタンス](glossary://instance)をいくつも作って使えるようにする設計図の働きをします。例えば自転車のようなオブジェクトの設計図では、自転車の特徴や動作を定義しますが、同じように構造体ではそれらを[プロパティ](glossary://property)や[メソッド](glossary://method)として定義します。

構造体のインスタンスを作ると、そのインスタンスには設計図で定義されたすべてのプロパティとメソッドが含まれています。すべてのインスタンスは同じプロパティとメソッドを共有していますが、プロパティの値は別々に変更させることができるので、構造体から作った（インスタンス化した）各インスタンスをカスタマイズすることができます。例えば、自転車の構造体に色のプロパティがあった場合、赤い自転車青または青い自転車を作ることができます。

構造体は[クラス](glossary://class)に似ていますが、重要な違いが2点あります。1つは、構造体は[値型](glossary://value%20type)である、つまり常に値によってコピーされる点であり、もう1つは、構造体はほかの構造体からの継承に対応していない点です。

```
struct Bicycle { 
	var color : Color 
	var type : BikeCategory
}
```</string>
				<key>Title</key>
				<string>構造体</string>
			</dict>
		</dict>
		<key>subview</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[コンテナ](glossary://container)ビュー内に含まれるビュー。コンテナビューにはいくつでもサブビューを含めることができます。それぞれのサブビューにはそのサブビューを含めることができ、以下同様に続きます。ビューとそのビューのすべての子孫ビューによって[ビュー階層](glossary://view%20hierarchy)が構成されます。</string>
				<key>Title</key>
				<string>サブビュー</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンピュータが理解して実行できるようにコードを書くための規則。</string>
				<key>Title</key>
				<string>構文</string>
			</dict>
		</dict>
		<key>task</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>タスクを使うと、Appで個々の作業単位を扱うことができ、コードではUIの処理などの大事なことに集中できます。タスクを作成すると、タスクはプログラムの一部として[非同期的](glossary://asynchronous%20process)にコードを実行します。これによって、コードのその他の部分ではほかの作業を行うことができます。コードの中でこのタスクからのデータが必要な部分には、タスクの結果を`await`（待機）させることができます。</string>
				<key>Title</key>
				<string>タスク</string>
			</dict>
		</dict>
		<key>ternary conditional operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>条件文を書くための特殊で簡潔な方法。この[演算子](glossary://operator)には3つの項があり、`条件 ? 真の値 : 負の値`という形を取ります。[`if` 文](glossary://if%20statement)に似ていて、条件が`true`（真）の場合は`真の値`、`false`（偽）の場合は`負の値`を返します。

下記のコードでは、`isOn`（オン）が`true`の場合、四角形は緑になります。`isOn`が`false`の場合、四角形は赤になります。

```
Rectangle()
     .foregroundColor(isOn ? .green : .red)
```

上記のコードでは、値`isOn`が `true`の場合は値`.green`が返され、そうでない場合は値`.red`返されます。
</string>
				<key>Title</key>
				<string>3項条件演算子</string>
			</dict>
		</dict>
		<key>toolbar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の機能を実行するために使用されるアイコンの一部です。toolbar修飾子には、ビューのコレクションを追加することによって提供することができるツールバー項目のコレクションが想定されます。</string>
				<key>Title</key>
				<string>ツールバー</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>その他のすべてのビューが置かれるビュー。このビューは[ルートビュー](glossary://root%20view)とも呼ばれ、[ビュー階層](glossary://view%20hierarchy)の一番上にあり、階層内のすべての[サブビュー](glossary://subview)に対する[コンテナビュー](glossary://container)の役割を果たします。</string>
				<key>Title</key>
				<string>最上位ビュー</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビュー内のコンテンツに関連して使用される場合、末尾のエッジとは、コンテンツの横方向の終了位置のことをいいます。末尾のエッジの位置は環境設定によって異なり、通常は地域と言語に基づきます。
                    例えば、英語やオランダ語のように左から右へと読む言語では、末尾のエッジは右側です。アラビア語やヘブライ語のように右から左へと読む言語では、末尾のエッジは左側です。</string>
				<key>Title</key>
				<string>末尾のエッジ</string>
			</dict>
		</dict>
		<key>training</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>機械学習において、機械学習アルゴリズムがデータセットから学習していくプロセス。

教師あり学習では、モデルはデータの特徴とそのデータのラベルの間に最も正確な数学的関係を作り出そうとします。教師なし学習では、モデルはデータの特徴そのものの間の関係を見つけようとします。</string>
				<key>Title</key>
				<string>学習</string>
			</dict>
		</dict>
		<key>training dataset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>機械学習モデルが[予測](glossary://prediction)を生成するように[学習](glossary://training)させるデータの集合体。</string>
				<key>Title</key>
				<string>学習データセット</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ある種のデータの、プロパティ（特徴）とメソッド（動作）の名前付きグループ。

型は、関連する機能のセットを作成して、より簡単にアクセスできるようにする手段です。

```
struct Person { 
	var name : Int
	var age : String 

	func greet() { 
		print("Hello, friend!")
	}
}
```</string>
				<key>Title</key>
				<string>型</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>書かれた言語が表示されたときに見やすく、読みやすく、魅力的にするために活字を整える技術とテクニック。</string>
				<key>Title</key>
				<string>タイポグラフィ</string>
			</dict>
		</dict>
		<key>unwrap</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[オプショナル](glossary://optional)型の[インスタンス](glossary://instance)からラップされた値を抽出すること。
				
オプショナルの値をラップ解除する一般的な方法は、`if`-`let`を使うことです:
```
var count: Int? = 48
if let unwrappedCount = count {
	print(unwrappedCount)
} else {
	print("count has no value")
}
```</string>
				<key>Title</key>
				<string>ラップ解除</string>
			</dict>
		</dict>
		<key>upper bound</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[範囲](glossary://range%20value)内で、カウントアップの終了値。

```
let closedRange = 1...5 // 下限は1で、上限は5です
for i in closedRange { 
	print(i) // 1 2 3 4 5
}
```</string>
				<key>Title</key>
				<string>上限</string>
			</dict>
		</dict>
		<key>user</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appを使用する人。</string>
				<key>Title</key>
				<string>ユーザ</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>画面をタッチしたり、キーボードでテキストを入力したり、マイクに向かって話したりなど、アプリケーションがユーザ操作から取得する情報。
</string>
				<key>Title</key>
				<string>ユーザ入力</string>
			</dict>
		</dict>
		<key>user interaction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appを使って[ユーザ](glossary://user)が実行するアクション。例えば、ボタンをタップする、画面を左にスワイプする、デバイスを回転させる、`ColorPicker`（カラーピッカー）から色を選択する、テキストフィールドに文字を入力するといったアクションは、すべてユーザの操作です。</string>
				<key>Title</key>
				<string>ユーザの操作</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ユーザがAppを操作する手段。“UI”とも呼ばれます。この用語は多くの場合、ユーザがイメージ、テキスト、ボタン、スライダ、スクロールビューなどの要素を使って操作するAppの仮想的な部分のことをいいます。</string>
				<key>Title</key>
				<string>ユーザインターフェイス</string>
			</dict>
		</dict>
		<key>validation dataset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>機械学習モデルの[学習データセット](glossary://training%20dataset)から差し引かれたデータのサンプル。モデルは検証データセットを使用して、予測の正確さを評価します。</string>
				<key>Title</key>
				<string>検証データセット</string>
			</dict>
		</dict>
		<key>value type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>値型の[インスタンス](glossary://instance)（[構造体](glossary://structure)など）を作成すると、そのデータはインスタンス自体に保存されます。そのインスタンスを変数に[代入](glossary://assignment)するか、関数への[引数](glossary://argument)として渡すと、データの独立したコピーから新しいインスタンスが作成されます。

以下の例のように、インスタンスは値によってコピーされます:

```
struct Bicycle {
  var color: Color
}

var redBike = Bicycle(color: .red)
var blueBike = redBike
blueBike.color = .blue
print(redBike.color) // =&gt; red
print(blueBike.color) // =&gt; blue
// redBike and blueBike each have their own copy of the data
```値型の[インスタンス](glossary://instance)（[構造体](glossary://structure)など）を作成すると、そのデータはインスタンス自体に保存されます。そのインスタンスを変数に[代入](glossary://assignment)するか、関数への[引数](glossary://argument)として渡すと、データの独立したコピーから新しいインスタンスが作成されます。

以下の例のように、インスタンスは値によってコピーされます:

```
struct Bicycle {
  var color: Color
}

var redBike = Bicycle(color: .red)
var blueBike = redBike
blueBike.color = .blue
print(redBike.color) // =&gt; red
print(blueBike.color) // =&gt; blue
// redBike and blueBike each have their own copy of the data
```</string>
				<key>Title</key>
				<string>値タイプ</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変更可能な値を保存するための、名前の付いた入れ物。

変数には、[整数](glossary://Int)、[文字列](glossary://String)、[範囲](glossary://range)など、さまざまな[型](glossary://type)の値を保存できます。  
```
var favoriteNumber = 7 // 整数を保存します
var greeting = "Hello" // 文字列を保存します
var repetitions = 1...5 // 範囲を保存します
```
</string>
				<key>Title</key>
				<string>変数</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>あるものの速さと方向です。</string>
				<key>Title</key>
				<string>速度</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ビューは、Appのユーザインターフェイスの構築要素で、`View`[プロトコル](glossary://protocol)に[準拠](glossary://conform)する視覚的な要素を示します。

SwiftUIのビューの一例として、テキストビュー、イメージビュー、スライダ、グリッド、ボタン、図形があります。</string>
				<key>Title</key>
				<string>ビュー</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ほかのビューに対する相対的なビューのレイアウトを定義する構造。階層の一番上にある最上位ビューのインスタンスへの参照を伴います。最上位ビューにはいくつでもサブビューを含めることができます。それぞれのサブビューにはそのサブビューを含めることができ、以下同様に続きます。</string>
				<key>Title</key>
				<string>ビュー階層</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>[センサー](glossary://sensor)が感知した音の大きさ。0から1の値を取ります。</string>
				<key>Title</key>
				<string>音量</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>指定した条件が`true`（真）になる間は繰り返し実行されるコードブロック。条件が`false`（偽）に変わると、ループの実行は終了します。</string>
				<key>Title</key>
				<string>whileループ</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ステージ内のアイテム（宝石、スイッチ、ブロックなど）の輪郭。実行するたびにランダムに置かれるアイテムが現れる可能性のある場所を示すために使われます。</string>
				<key>Title</key>
				<string>ワイヤフレーム</string>
			</dict>
		</dict>
		<key>yaw</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>平面に置かれているときの、デバイスの中心点を軸とした回転の単位。  数学的には、デバイスのz軸を軸とした回転です。単位はラジアンで、範囲は`-π`〜`π`です。</string>
				<key>Title</key>
				<string>ヨー</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
