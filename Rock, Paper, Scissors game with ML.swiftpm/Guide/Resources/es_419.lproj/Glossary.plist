<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Alpha</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Alfa, o el *canal alfa*, se refiere a la opacidad de un color, que va desde `0` (completamente transparente) a `1` (completamente opaco). Los datos alfa son un valor `Double` (número decimal) del 0 al 1.</string>
				<key>Title</key>
				<string>alfa</string>
			</dict>
		</dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo que tiene un valor ya sea `true` o `false`. Por ejemplo, `9 &lt; 7` devuelve un valor booleano `false`, ya que `9` no es menor que `7`.
```
var isRunning = false
```</string>
				<key>Title</key>
				<string>booleano</string>
			</dict>
		</dict>
		<key>Double</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo que almacena números que tienen un componente fraccionario, como 3.14. Nota: en Swift Playgrounds se debe usar siempre el punto (.) y no la coma (,) como separador decimal.</string>
				<key>Title</key>
				<string>Double</string>
			</dict>
		</dict>
		<key>ForEach</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una estructura que [itera](glossary://iteration) para explorar una [colección](glossary://collection) de datos (como un arreglo) con el objetivo de crear visualizaciones para cada elemento de la colección. 

La estructura `ForEach` requiere que cada elemento proporcione un `id` (identificador), ya sea de forma explícita en el [inicializador](glossary://initialization) `ForEach`, o según el protocolo `Identifiable`. Esto permite a SwiftUI identificar y actualizar por separado cada visualización generada con el inicializador `ForEach`.

```
ForEach(symbols) { símbolo en 
    Text(symbol.name)
}
```
</string>
				<key>Title</key>
				<string>ForEach</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo que almacena un número entero, como `10` o `-42`.</string>
				<key>Title</key>
				<string>Int</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo que almacena una serie de caracteres, como `"hola, mundo"` o `"gatitos bailarines"`.</string>
				<key>Title</key>
				<string>String</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Lenguaje de programación de Apple, usado para escribir apps para iPhone, iPad, Mac, Apple Watch y Apple TV.</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>SwiftUI</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>SwiftUI es una forma moderna de declarar interfaces de usuario para cualquier plataforma Apple, y te ofrece visualizaciones, controles y estructuras de disposición para declarar la interfaz de usuario de tu app. La estructura proporciona controladores de eventos para manejar toques, gestos y otros tipos de entrada en tu app, así como herramientas para administrar el flujo de datos de los modelos de tu app hacia las visualizaciones y los controles que los usuarios ven y con los que interactúan.</string>
				<key>Title</key>
				<string>SwiftUI</string>
			</dict>
		</dict>
		<key>absolute value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El valor sin signo de un número. Por ejemplo, el valor absoluto de -12 es 12 y el valor absoluto de 23.4 es 23.4.</string>
				<key>Title</key>
				<string>valor absoluto</string>
			</dict>
		</dict>
		<key>abstraction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una versión simplificada de algo más complejo.   Una abstracción oculta los detalles para que sea más fácil concentrarse y combinar elementos del código.   Por ejemplo, un [tipo](glossary://type) es una abstracción que oculta la configuración, las propiedades y los métodos de una instancia de ese tipo.</string>
				<key>Title</key>
				<string>abstracción</string>
			</dict>
		</dict>
		<key>accelerometer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un sensor que mide la aceleración de tu dispositivo en tres dimensiones: arriba y abajo, adelante y atrás, e izquierda y derecha.

Cuando tu dispositivo se encuentra sobre una superficie plana en modo horizontal, los movimientos hacia arriba y abajo miden la aceleración en el eje “z”, los movimientos hacia la izquierda y derecha la miden en el eje “y”, y los movimientos hacia adelante y atrás la miden en el eje “x”.</string>
				<key>Title</key>
				<string>acelerómetro</string>
			</dict>
		</dict>
		<key>adopt</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Para adoptar un protocolo, un tipo proporciona un conjunto de sus propias implementaciones para los requisitos del protocolo, tal como una lista de sus métodos y propiedades.</string>
				<key>Title</key>
				<string>adoptar</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un conjunto de instrucciones o reglas detalladas para resolver un problema. Por ejemplo, una lista de los pasos necesarios para hacer un café se puede considerar un algoritmo.</string>
				<key>Title</key>
				<string>algoritmo</string>
			</dict>
		</dict>
		<key>append</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Agregar un elemento al final de algo. Por ejemplo, puedes agregar un string al final de otro string; o agregar un elemento a un arreglo de elementos.
</string>
				<key>Title</key>
				<string>agregar al final</string>
			</dict>
		</dict>
		<key>application</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Software creado usando código que te permite realizar tareas específicas. Por ejemplo, puedes usar la aplicación (app) Mensajes para enviar y recibir mensajes.</string>
				<key>Title</key>
				<string>aplicación</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un valor de entrada que se pasa a una función para personalizar su comportamiento. Por ejemplo, en la función `move(distance: 3)`, el número `3` es un argumento que especifica cuántos espacios moverse.</string>
				<key>Title</key>
				<string>argumento</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un símbolo, como `+`, `-`, `*` o `/`, que realiza una operación matemática básica en uno o más números. Por ejemplo, `42 / 7` y `17 - 5` usan operadores aritméticos.</string>
				<key>Title</key>
				<string>operador aritmético</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una colección que almacena una lista ordenada de elementos del mismo tipo. El mismo elemento puede aparecer varias veces en distintas posiciones.

En el código de abajo, `highScores` es un arreglo de valores [enteros](glossary://Int) y `greetings` es un arreglo de [strings](glossary://String).
```
let highScores = [37, 34, 29, 29, 26]
let greetings = ["hola", "adiós", "buenos días"]
```</string>
				<key>Title</key>
				<string>arreglo</string>
			</dict>
		</dict>
		<key>aspect ratio</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La relación entre el ancho y el alto de una imagen o pantalla.

Por ejemplo, una imagen con una proporción o relación de aspecto de 2:1 tiene un ancho que es el doble de su alto. Una imagen con una proporción de 1:1 tiene el mismo ancho y alto.</string>
				<key>Title</key>
				<string>proporciones</string>
			</dict>
		</dict>
		<key>asset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Los componentes son imágenes, sonidos y demás elementos que tu app utiliza. Puedes importarlos a Swift Playgrounds desde otras apps, como Archivos y Fotos.</string>
				<key>Title</key>
				<string>componente</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una acción que establece el valor de una variable o constante.</string>
				<key>Title</key>
				<string>asignación</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El símbolo `=` se usa para establecer el valor de una variable. Por ejemplo, `greeting = "hola"` establece el valor de `greeting` a `"hola"`.</string>
				<key>Title</key>
				<string>operador de asignación</string>
			</dict>
		</dict>
		<key>asynchronous process</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código que se puede ejecutar mientras el resto de la app o programa se sigue ejecutando. A diferencia de un proceso sincrónico, que bloquea la ejecución del programa hasta que se completa, un proceso asincrónico puede ejecutarse de forma simultánea con el resto del código de tu app.</string>
				<key>Title</key>
				<string>proceso asincrónico</string>
			</dict>
		</dict>
		<key>asynchronous stream</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una [secuencia](glossary://sequence) cuyos valores no están disponibles todos a la vez, sino que se producen a intervalos de tiempo como un flujo de valores. Para iterar en una secuencia asíncrona, debes esperar cada valor nuevo antes de realizar operaciones en él. 
				
Los flujos asíncronos a menudo se usan para trabajar con datos que llegan con el tiempo, por ejemplo, los temblores de la tierra o los cuadros de video.</string>
				<key>Title</key>
				<string>flujo asincrónico</string>
			</dict>
		</dict>
		<key>binding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Agrega el [contenedor de propiedades](glossary://property%20wrapper) `@Binding` (ligadura) para crear una conexión bidireccional entre una propiedad que almacena datos y una visualización que muestra y cambia esos datos. Una ligadura conecta una propiedad a una fuente única de información que está almacenada en otro lugar, en lugar de almacenar los datos directamente.

Por ejemplo, un botón que cambia entre reproducir y pausar puede crear una ligadura con una propiedad de su [visualización de contenedor](glossary://container) mediante el contenedor de propiedades `@Binding`.</string>
				<key>Title</key>
				<string>ligadura</string>
			</dict>
		</dict>
		<key>body</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El cuerpo de una [visualización](glossary://view) es el lugar en donde proporcionas el contenido de la visualización, compuesto de al menos una [visualización integrada](glossary://built-in%20view) que ofrece SwiftUI, o bien cualquier [visualización compuesta](glossary://composed%20view) creada previamente.</string>
				<key>Title</key>
				<string>cuerpo</string>
			</dict>
		</dict>
		<key>bounds</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En un arreglo, es el intervalo de valores que un índice de arreglo puede tener. Por ejemplo, el arreglo `[17, 42, 95]` puede tener valores de índice del 0 al 2. La comprobación de los límites es el proceso de verificar que un valor de índice esté dentro de los límites de un arreglo.</string>
				<key>Title</key>
				<string>límites</string>
			</dict>
		</dict>
		<key>brightness</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La cantidad de luz que proviene de la cámara, de `0` (sin luz) a `1` (luz completa). Los datos de brillo deben ser un valor [`Double`](glossary://Double) (número decimal) del `0` al `1`.</string>
				<key>Title</key>
				<string>brillo</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un error en el código que evita que una aplicación se ejecute como se esperaba. 
</string>
				<key>Title</key>
				<string>error</string>
			</dict>
		</dict>
		<key>built-in view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una [visualización](glossary://view) proporcionada por la estructura de [SwiftUI](glossary://SwiftUI), tal como una visualización de botón (`Button`), texto (`Text`) o imagen (`Image`). Las visualizaciones integradas se usan como bloques de construcción para crear [visualizaciones compuestas](glossary://composed%20view) más complejas en la [interfaz de usuario](glossary://user%20interface).</string>
				<key>Title</key>
				<string>visualización integrada</string>
			</dict>
		</dict>
		<key>bundle</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una app usa paquetes para almacenar su código y los recursos que necesita, como archivos de datos, imágenes, sonidos. Cada app tiene un paquete principal y puede tener otros paquetes con nombre. Un paquete es una carpeta en el disco, y los recursos que contiene están organizados en subcarpetas bien definidas. La estructura de un paquete varía según su tipo y la plataforma en la que se encuentre.</string>
				<key>Title</key>
				<string>paquete</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Llamar a una función significa darle la instrucción a esa función para que se ejecute, lo que hace que se realicen las acciones que están definidas dentro de ella.</string>
				<key>Title</key>
				<string>llamar</string>
			</dict>
		</dict>
		<key>callback</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En ocasiones, una función u objeto podría requerir devolver una llamada para proporcionar datos o para indicarte que ocurrió algo importante mientras se ejecutaba. Para poder hacer eso, debes pasarle una función o un objeto [delegado](glossary://delegate) mediante el cual puede hacer la devolución de llamada.

Las devoluciones de llamada son una herramienta comúnmente usada para controlar procesos [asincrónicos](glossary://asynchronous%20process).</string>
				<key>Title</key>
				<string>devolución de llamada</string>
			</dict>
		</dict>
		<key>chaining</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una técnica para [llamar](glossary://call) a una serie de [funciones](glossary://function) en donde cada función devuelve un objeto, el cual a su vez es operado por la función siguiente. Las llamadas de función se encadenan en una sola dentro de un solo enunciado. 
				
Por ejemplo, los [modificadores](glossary://modifier) de SwiftUI se pueden encadenar, dado que un modificar es un [método](glossary://method) que acepta una [visualización](glossary://view), aplica algunos cambios y devuelve otra visualización.</string>
				<key>Title</key>
				<string>encadenar</string>
			</dict>
		</dict>
		<key>class</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una clase es un contenedor de código que actúa como un plano para hacer varias [instancias](glossary://instance) del mismo tipo de elemento. De la misma manera que un plano puede definir las funciones y los comportamientos de un objeto, como una bicicleta, una clase los define como sus [propiedades](glossary://property) y [métodos](glossary://method).

Al crear una instancia de la clase, esta contiene todas las propiedades y métodos definidos en el plano. Aunque cada instancia comparte las mismas propiedades y métodos, puedes modificar los valores de sus propiedades de forma independiente, lo que permite personalizar cada instancia que se cree a partir de la clase. Por ejemplo, una clase de bicicleta puede tener una propiedad de color, lo que te permite crear tanto bicicletas rojas como azules.

Una clase es similar a una [estructura](glossary://structure), pero difiere en dos cosas: primero, una clase es un [tipo de referencia](glossary://reference%20type), es decir que siempre se copia mediante una referencia, y segundo, una clase puede heredar su definición de otra clase.</string>
				<key>Title</key>
				<string>clase</string>
			</dict>
		</dict>
		<key>classification</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En el ámbito del aprendizaje automático, una clasificación es un algoritmo que aprende a partir de conjuntos de datos etiquetados y utiliza lo aprendido para clasificar observaciones nuevas.

Por ejemplo, un clasificador de razas de perros se entrena mediante imágenes etiquetadas de distintas razas de perros. Al mostrarle una nueva imagen de perro, la clasificará como una de esas razas de perro.</string>
				<key>Title</key>
				<string>clasificación</string>
			</dict>
		</dict>
		<key>closed range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un intervalo que va desde un límite inferior hasta un límite superior, incluyendo este.

En Swift, el valor del intervalo 1-3 puede escribirse como 1...3. En este caso, el intervalo incluirá el límite inferior de 1 y contará hasta el límite superior de 3.
```
let closedRange = 1...3
for i in closedRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>intervalo cerrado</string>
			</dict>
		</dict>
		<key>closure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Las clausuras son [funciones](glossary://function) que se ejecutan en su lugar sin necesidad de un nombre.
					
```
scene.setOnStartHandler {
    // Cuerpo de la clausura
}
```
Las clausuras pueden capturar y almacenar referencias a cualquier constante y variable del contexto en el que están definidas. Esto se conoce como la clausura de esas constantes y variables.</string>
				<key>Title</key>
				<string>clausura</string>
			</dict>
		</dict>
		<key>code comment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un comentario de código es una manera en que los programadores agregan anotaciones sobre su código.   Puedes iniciar un comentario de una línea con dos diagonales seguidas por un espacio; por ejemplo "// Este es mi comentario.".   Cuando ejecutas tu código, los comentarios de código no se ejecutan.</string>
				<key>Title</key>
				<string>comentario de código</string>
			</dict>
		</dict>
		<key>code expression</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una porción de código que se puede evaluar para devolver un valor. Por ejemplo, si `months` es un arreglo que contiene 12 elementos, la expresión de código `months.count - 1` devuelve el valor `11`.</string>
				<key>Title</key>
				<string>expresión de código</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El acto de componer comandos, estructuras de código y algoritmos para crear una aplicación.</string>
				<key>Title</key>
				<string>programar</string>
			</dict>
		</dict>
		<key>collection</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una estructura de datos, tal como un [arreglo](glossary://array) o un [intervalo](glossary://range), que se usa para almacenar varias porciones de datos. 
```
let heights = [1, 5, 7]
let closedRange = 1...8
```</string>
				<key>Title</key>
				<string>colección</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Código que le indica a una aplicación que realice una acción específica. </string>
				<key>Title</key>
				<string>comando</string>
			</dict>
		</dict>
		<key>comment out</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Impedir que una línea de código se ejecute al convertirla en un [comentario de código](glossary://code%20comment). Puedes hacerlo agregando `//` al inicio de la línea de código. Por ejemplo:
                
`// level.run()`</string>
				<key>Title</key>
				<string>marcar código como comentario</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un símbolo, como `==`, `!=`, `&lt;`, `&gt;`, `&lt;=` o `&gt;=`, que se usa para comparar dos valores. Un operador de comparación se puede usar en una condición de un enunciado `if` o de un ciclo `while` para que devuelva un valor booleano que indique si una comparación es `true`. Por ejemplo, `6 &gt; 8` compara `6` con `8` y devuelve `false`.</string>
				<key>Title</key>
				<string>operador de comparación</string>
			</dict>
		</dict>
		<key>compiler error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Los errores de compilación suceden debido a errores de precisión en el código. Los verás marcados con un punto rojo en el margen izquierdo y en la barra de herramientas.</string>
				<key>Title</key>
				<string>error de compilación</string>
			</dict>
		</dict>
		<key>composed view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una [visualización](glossary://view) creada al combinar una o más visualizaciones [integradas](glossary://built-in%20view).
</string>
				<key>Title</key>
				<string>visualización compuesta</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El proceso de combinar partes pequeñas de una aplicación para formar piezas más grandes que son más fáciles de comprender y con las que es más sencillo trabajar.</string>
				<key>Title</key>
				<string>composición</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un operador que combina asignaciones (establecer el valor de una variable) con otra operación, como una suma o una resta. Por ejemplo, si el valor actual de `a` es `1`, al usar `a += 3` se agrega `3` a `1` y se asigna el resultado a `a`, por lo que ahora el valor de `a` es `4`.</string>
				<key>Title</key>
				<string>operador de asignación compuesta</string>
			</dict>
		</dict>
		<key>computed property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En lugar de almacenar un valor directamente, una propiedad calculada mide un valor en función del estado actual de otros valores relacionados cuando se obtiene.

En el ejemplo de abajo, `area` es una propiedad calculada, mientras que `width` y `height` son propiedades almacenadas:

```
struct RectangleCalculator { 
    var width = 10.0
    var height = 10.0
    
    var area : Double { 
        return width * height
    }
} 
```</string>
				<key>Title</key>
				<string>propiedad calculada</string>
			</dict>
		</dict>
		<key>condition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En un bloque de [código condicional](glossary://conditional%20code) (tal como un [enunciado if](glossary://if%20statement)), la condición es un valor [booleano](glossary://Boolean) que determina si se ejecuta o no el código que está dentro del bloque. 

Si la condición es `true`, el bloque de código se ejecutará; si es `false`, se omitirá.
```
let x = 4

if x &lt; 5 { 
	// Si la condición es verdadera, el código que está en el bloque se ejecutará. 
}

if x &gt; 5 { 
	// Si la condición es falsa, el código que está en el bloque no se ejecutará. 
}
```</string>
				<key>Title</key>
				<string>condición</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Código que se ejecuta sólo cuando se cumplen condiciones específicas. Por ejemplo, los [enunciados `if`](glossary://if%20statement) y los [ciclos `while`](glossary://while%20loop) contienen código condicional que se ejecuta si una condición es `true` o mientras lo es.
```
if x &gt; 5 { 
	// El código se ejecuta solo si x es mayor a 5
}
```</string>
				<key>Title</key>
				<string>código condicional</string>
			</dict>
		</dict>
		<key>confidence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En el ámbito del aprendizaje automático, la fiabilidad es la probabilidad de que un modelo de aprendizaje automático realice [predicciones](glossary://prediction). La fiabilidad de la predicción es un indicador del rendimiento del modelo de aprendizaje automático.</string>
				<key>Title</key>
				<string>fiabilidad</string>
			</dict>
		</dict>
		<key>conform</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Se dice que un tipo cumple con un protocolo cuando proporciona su propia implementación de los requisitos de ese protocolo.</string>
				<key>Title</key>
				<string>cumplir</string>
			</dict>
		</dict>
		<key>console</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un lugar donde puedes visualizar la salida de depuración de tu código mientras se está ejecutando. Cuando llamas a `print(_:)` en tu código, el valor que pasas se muestra en la consola.</string>
				<key>Title</key>
				<string>consola</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un contenedor con nombre que almacena un valor que no se puede cambiar.</string>
				<key>Title</key>
				<string>constante</string>
			</dict>
		</dict>
		<key>container</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un contenedor es una visualización que contiene otras visualizaciones en su interior.</string>
				<key>Title</key>
				<string>contenedor</string>
			</dict>
		</dict>
		<key>coordinates</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un conjunto de números que determina de manera única una posición en un espacio. Por ejemplo, (100, -200) son coordenadas de un punto en un espacio 2D, en donde la coordenada x es 100 y la coordenada y es -200.</string>
				<key>Title</key>
				<string>coordenadas</string>
			</dict>
		</dict>
		<key>data</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Información que se procesa o almacena en una computadora y es distinta del código que actúa sobre ella.</string>
				<key>Title</key>
				<string>datos</string>
			</dict>
		</dict>
		<key>data cleaning</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El proceso de revisar un conjunto de datos y eliminar o modificar los que sean incorrectos, que estén incompletos o duplicados, o que no tengan el formato correcto.

La limpieza de datos puede mejorar la precisión de un modelo de aprendizaje automático al garantizar que se [entrene](glossary://training) usando solamente los datos más relevantes y correctos disponibles.</string>
				<key>Title</key>
				<string>limpieza de datos</string>
			</dict>
		</dict>
		<key>data flow</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El movimiento de datos en tu app, y cómo los cambios en esos datos modifican el estado o la IU de tu app.</string>
				<key>Title</key>
				<string>flujo de datos</string>
			</dict>
		</dict>
		<key>data model</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una representación de código de los datos usados en tu app que refleja la organización de los datos. Tu [interfaz de usuario](glossary://user%20interface) puede mostrar el contenido del modelo de datos, y puede interactuar con él para modificarlo. Tu modelo de datos sirve como la [fuente única de información](glossary://source%20of%20truth) de tu app.</string>
				<key>Title</key>
				<string>modelo de datos</string>
			</dict>
		</dict>
		<key>data separation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El concepto de que el [modelo de datos](glossary://data%20model) de una app debe definirse por separado de la [interfaz de usuario](glossary://user%20interface) usada para mostrar e interactuar con esos datos. La separación de datos te permite modificar tanto el modelo de datos como la interfaz de usuario de forma independiente, facilita la comprensión del funcionamiento de tu app y mejora la capacidad de comprobación de la misma.</string>
				<key>Title</key>
				<string>separación de datos</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Encontrar y corregir errores en el código que evitan que una aplicación se ejecute correctamente. </string>
				<key>Title</key>
				<string>depurar</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una porción de código que crea algo nuevo en tu aplicación, tal como una función, variable o un tipo personalizado. Por ejemplo, `let planet = "Earth"` declara una nueva constante, `planet` y le da un valor `"Earth"`.

El código de abajo declara una variable, `data`, del tipo `AppData` (datos de app), pero no le otorga un valor inicial.

```
var data : AppData
```</string>
				<key>Title</key>
				<string>declaración</string>
			</dict>
		</dict>
		<key>decode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Transformar los datos de un formato de almacenamiento eficiente, como JSON, a un formato con el que es más fácil trabajar en código.</string>
				<key>Title</key>
				<string>decodificar</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El proceso de desglosar un problema grande en partes más pequeñas y manejables.</string>
				<key>Title</key>
				<string>descomposición</string>
			</dict>
		</dict>
		<key>decrement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Disminuye un número por su valor entero, comúnmente 1.</string>
				<key>Title</key>
				<string>disminución</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Proporcionar el comportamiento o valor explícito de una pieza de código nueva, como una función, variable o tipo personalizado. Por ejemplo, para definir una función debes proporcionarle un conjunto de comandos dentro de ella para indicarle qué hacer.</string>
				<key>Title</key>
				<string>definir</string>
			</dict>
		</dict>
		<key>delegate</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un objeto especial que se proporciona a otro objeto para que te notifique cuando se produzcan eventos importantes. El objeto delegado suele ajustarse a un [protocolo](glossary://protocol), con funciones a las que se puede llamar para comunicarse con tu código. A la operación de llamar a una función delegada se le conoce como [devolución de llamada](glossary://callback).

La delegación es un patrón común que se usa para la comunicación entre distintos objetos, especialmente en los procesos [asincrónicos](glossary://asynchronous%20process).</string>
				<key>Title</key>
				<string>delegado</string>
			</dict>
		</dict>
		<key>destination view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La visualización que se muestra después de que un [usuario](glossary://user) hace clic o toca un `NavigationLink` dentro de una `NavigationStack` o una `NavigationSplitView`.</string>
				<key>Title</key>
				<string>visualización de destino</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una forma de sintaxis que se usa para acceder a propiedades o llamar métodos de una instancia. Por ejemplo, `expert.toggleSwitch()` llama al método `toggleSwitch()` en la instancia `expert`.</string>
				<key>Title</key>
				<string>notación de puntos</string>
			</dict>
		</dict>
		<key>edge case</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una situación, prevista o imprevista, que ocurre en circunstancias poco frecuentes o extremas de un parámetro operativo. 

Por ejemplo, al programar una app para iPad, un caso extremo podría ser un fallo producido cuando se actualiza el idioma del dispositivo a uno que se escribe de derecha a izquierda, como árabe. </string>
				<key>Title</key>
				<string>caso extremo</string>
			</dict>
		</dict>
		<key>efficiency</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una forma de evaluar qué tan eficiente es una parte del código basándose en la rapidez con la que puede ejecutar su propósito y su habilidad para usar tan pocos recursos, memoria y alimentación como sea posible.</string>
				<key>Title</key>
				<string>eficiencia</string>
			</dict>
		</dict>
		<key>element</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un elemento que está en una [colección](glossary://collection), como un [arreglo](glossary:///array) o un [intervalo](glossary://range).

```
let letters = ["a", "b", "c"] // "a" es el primer elemento, "b" es el segundo y "c" es el tercero. 
```</string>
				<key>Title</key>
				<string>elemento</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El último bloque de código en un enunciado `if`. El bloque `else` se ejecuta si todas las otras condiciones del enunciado `if` son `false`.

```
if hopper.isFacingStep { 
	// bloque if
} else if hopper.isFacingUpdraft { 
	// bloque else if
} else { 
	// bloque else
}
```</string>
				<key>Title</key>
				<string>bloque else</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código dentro de un enunciado `if` que se usa para verificar una condición que no verifica el [bloque `if`](glossary://if%20block) ni ningún otro bloque `else if`.

```
if hopper.isFacingStep { 
	// bloque if
} else if hopper.isFacingUpdraft { 
	// bloque else if
} else { 
	// bloque else
}
``</string>
				<key>Title</key>
				<string>bloque else if</string>
			</dict>
		</dict>
		<key>encode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Transformar datos de un formato con el que es más fácil trabajar en código a un formato de almacenamiento eficiente, como JSON.</string>
				<key>Title</key>
				<string>codificar</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo que define un conjunto de valores relacionados llamados *casos*.

 Por ejemplo, la enumeración `Direction` define los casos para cada dirección cardinal: `north`, `south`, `east` y `west`. 
```
enum Direction { 
	case north, south, east, west
}
```
 Al [pasar](glossary://pass%20in) un valor de enumeración, siempre eliges sólo uno de sus casos. Por ejemplo:
 ```
 moveIn(direction: .north)
```</string>
				<key>Title</key>
				<string>enumeración</string>
			</dict>
		</dict>
		<key>environment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El entorno de una visualización proporciona acceso a una colección de valores definida. Algunos de estos reflejan automáticamente el estado del sistema, la configuración del usuario o el estado de la visualización. Algunos ejemplos son el esquema de color, el estilo de texto o el estado de enfoque de la visualización. Otros entornos proporcionan valores útiles de forma predeterminada, como el límite de líneas de los campos de texto. Para obtener detalles sobre los valores de los entornos, consulta el [contenedor de propiedades](glossary://property%20wrapper) `@Environment`. Para obtener la lista completa de valores de entorno, visita [esta](doc://com.apple.documentation/documentation/swiftui/environmentvalues) página.</string>
				<key>Title</key>
				<string>entorno</string>
			</dict>
		</dict>
		<key>environment object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Agrega el [contenedor de propiedades](glossary://property%20wrapper) `@EnvironmentObject` para declarar una propiedad de objeto observable proporcionada por una visualización antigua o de contenedor. Si declaras una propiedad como un objeto de entorno, asegúrate de establecer una instancia de modelo correspondiente en una visualización antigua al llamar a su modificador `environmentObject(_:)`.</string>
				<key>Title</key>
				<string>objeto de entorno</string>
			</dict>
		</dict>
		<key>event</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una acción detectable por una aplicación de computadora. Una entrada, tal como presionar un botón o girar la pantalla, activa un evento.</string>
				<key>Title</key>
				<string>evento</string>
			</dict>
		</dict>
		<key>event handler</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una función que se llama después de que suceda un evento para que lo controle.</string>
				<key>Title</key>
				<string>controlador de eventos</string>
			</dict>
		</dict>
		<key>extension</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una forma de agregar una funcionalidad nueva a un [tipo](glossary://type) existente, como una [clase](glossary://class), [estructura](glossary://structure), [enumeración](glossary://enumeration) o [protocolo](glossary://protocol).

Una extensión te permite agregar [métodos](glossary://method) y [propiedades](glossary://property) a un tipo existente. El código de abajo agrega el método `cubed()` y la propiedad `isOdd` al tipo `Int`:

```
extension Int { 
	func cubed() -&gt; Int { 
        return self * self * self
    }
    
    var isOdd : Bool { 
        return self % 2 == 1
    }
}

let two : Int = 2
print(two.cubed()) // 8
print(two.isOdd) // falso
```</string>
				<key>Title</key>
				<string>extensión</string>
			</dict>
		</dict>
		<key>filtering</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Procesar datos de una colección o estructura de datos para producir un nuevo conjunto de datos.</string>
				<key>Title</key>
				<string>filtrado</string>
			</dict>
		</dict>
		<key>focus state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un valor que representa la disponibilidad de una visualización para recibir la entrada del usuario, como el texto ingresado en un campo de texto. Usa el [contenedor de propiedad](glossary://property%20wrapper) `@FocusState` junto con los modificadores `focused(_:equals:)` y `focused(_:)` para crear una visualización cuyos valores de enfoque se actualicen automáticamente según la interacción del usuario, y se puedan enfocar o desenfocar según el uso en un momento específico.</string>
				<key>Title</key>
				<string>estado de enfoque</string>
			</dict>
		</dict>
		<key>font</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un conjunto de caracteres de texto en un estilo, diseño, grosor y tamaño específicos. A los estilos se les conoce como *tipografías* y las variaciones de este estilo conforman la *familia* de la tipografía. Por ejemplo, HelveticaNeue es una tipografía y 10-point HelveticaNeue-Bold es un tipo de letra.</string>
				<key>Title</key>
				<string>tipo de letra</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código repetido que se ejecuta un cierto número de veces. 

Un ciclo puede [iterar](glossary://iterate) sobre cualquier [colección](glossary://collection) de datos, tal como un [intervalo](glossary://range%20value) o un [arreglo](glossary://array), ejecutando el bloque del ciclo por cada elemento de la colección.

En el ejemplo de abajo, el ciclo define una variable de ciclo, `value`, la cual te otorga acceso al valor del elemento actual de la colección:
```
for value in 1...4 { 
	byte.moveForward()
	byte.jump(height: value)
}
```</string>
				<key>Title</key>
				<string>ciclo for</string>
			</dict>
		</dict>
		<key>framework</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una estructura es un directorio que contiene recursos compartidos. Estos recursos pueden incluir archivos fuente, archivos de imagen, strings localizados, documentación de referencia y más en un solo paquete. Muchas apps pueden usar todos estos recursos simultáneamente. El sistema los carga en la memoria según sea necesario y comparte la única copia del recurso entre todas las apps siempre que sea posible.</string>
				<key>Title</key>
				<string>estructura</string>
			</dict>
		</dict>
		<key>full function name</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El nombre completo de una función, que incluye los nombres de sus parámetros separados por dos puntos (`:`). Por ejemplo: `move(to:duration:)`.</string>
				<key>Title</key>
				<string>nombre completo de la función</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código con nombre que se ejecuta cuando [se le llama](glossary://call) mediante su nombre. Una función puede pasar datos en la forma de [parámetros](glossary://parameter) y puede, opcionalmente, [devolver](glossary://return) datos una vez que su código termina de ejecutarse. Cuando se define una función dentro de un tipo, se le conoce como un [método](glossary://method).

Abajo se incluye un ejemplo de una definición de función para `turnRight()`. Puedes llamar a esta función escribiendo `turnRight()`. Después de llamarla, se ejecuta el código (aquí, se ejecuta `turnLeft()` tres veces).

```
func turnRight() { 
	turnLeft()
	turnLeft()
	turnLeft()
}
```</string>
				<key>Title</key>
				<string>función</string>
			</dict>
		</dict>
		<key>function definition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una definición de función describe lo que hace una función, lo que espera recibir y lo que devuelve cuando termina.</string>
				<key>Title</key>
				<string>definición de función</string>
			</dict>
		</dict>
		<key>fuzzy autocomplete</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un método para autocompletar código mediante una búsqueda de coincidencias parciales para encontrar coincidencias de variables, constantes, tipos y otros símbolos. Las búsquedas de strings parciales no son exactas, pero encuentran coincidencias relevantes con base en los caracteres que escribes. 

Por ejemplo, si buscas un [modificador de visualización](glossary://modifier) relacionado con una propiedad “escala”, puedes simplemente empezar a escribir `.scale`, lo cual te ofrecerá opciones de autorrelleno que empiezan con `.scale`, como `.scaledToFill` y `.scaleEffect`, pero también ofrecerá opciones menos precisas, como `.imageScale` y `.grayscale`.
</string>
				<key>Title</key>
				<string>autorrelleno de coincidencias parciales</string>
			</dict>
		</dict>
		<key>g</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una unidad de medida de la aceleración, o fuerza por unidad de masa. Un g (o fuerza g) equivale a la aceleración de la gravedad en la Tierra, o a unos 9.8 metros por segundo al cuadrado.</string>
				<key>Title</key>
				<string>g</string>
			</dict>
		</dict>
		<key>global function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una función a la cual se puede acceder desde cualquier archivo del proyecto.</string>
				<key>Title</key>
				<string>función global</string>
			</dict>
		</dict>
		<key>global scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Los símbolos que se pueden acceder desde el código en cualquier archivo fuente del mismo [módulo](glossary://module). Cualquier instancia, tipo o función que se defina en la parte superior del archivo fuente tiene un alcance global de forma predeterminada. </string>
				<key>Title</key>
				<string>alcance global</string>
			</dict>
		</dict>
		<key>global variable</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string></string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string></string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una variable a la cual se puede acceder desde cualquier archivo del proyecto.</string>
				<key>Title</key>
				<string>variable global</string>
			</dict>
		</dict>
		<key>grayscale</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un intervalo de tonos grises que van del blanco al negro.</string>
				<key>Title</key>
				<string>escala de grises</string>
			</dict>
		</dict>
		<key>gyroscope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un sensor que mide la orientación de tu dispositivo en tres dimensiones: su inclinación de adelante hacia atrás, su inclinación de izquierda a derecha, y su rotación alrededor de su centro.</string>
				<key>Title</key>
				<string>giroscopio</string>
			</dict>
		</dict>
		<key>half open range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un intervalo medio abierto que va desde un límite inferior hasta un límite superior, pero sin incluir este.

En Swift, el valor del intervalo 1-3 puede escribirse como 1..&lt;4. En este caso, el intervalo incluirá el límite inferior de 1 y contará hacia arriba sin incluir el valor 4.
```
let halfOpenRange = 1..&lt;4
for i in halfOpenRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>intervalo medio abierto</string>
			</dict>
		</dict>
		<key>hertz</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un hertz (Hz) es un ciclo por segundo. Cuando se aplica a vibraciones de sonido, 1 Hz es una onda de sonido por segundo. Los humanos pueden escuchar sonidos de entre 20 Hz y 16,000 Hz.</string>
				<key>Title</key>
				<string>hertz</string>
			</dict>
		</dict>
		<key>hue</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El tono de un color en la rueda de colores. Debe ser un valor `Double` (número decimal) del `0` al `1`.</string>
				<key>Title</key>
				<string>matiz</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El primer bloque de código en un enunciado `if`. El bloque `if` se ejecuta si la condición del enunciado `if` es `true`. 
```
if blu.isFacingStep { 
	blu.jump()
}
```</string>
				<key>Title</key>
				<string>bloque if</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una estructura de código que se usa para ejecutar código según el valor de una o más condiciones. El primer bloque del código en un enunciado `if` es el bloque `if`.
```
if blu.isFacingStep { 
	blu.jump()
}
```
 Un enunciado `if` también podría contener otros bloques que proporcionen verificaciones adicionales, como un bloque `else` o `else if`.
```
if blu.isFacingStep { 
	blu.jump()
} else if blu.isFacingHole { 
	blu.shapeShift(into: .bridge)
} else { 
	blu.moveForward()
}
```</string>
				<key>Title</key>
				<string>enunciado if</string>
			</dict>
		</dict>
		<key>import</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En Swift, una [declaración](glossary://declaration) `import` te permite acceder a símbolos (como tipos, funciones, propiedades y métodos) que están definidos fuera del archivo actual. Puedes importar los símbolos en un [módulo](glossary://module) o [estructura](glossary://framework), tal como [SwiftUI](doc://com.apple.documentation/documentation/swiftui) o [CoreMotion](doc://com.apple.documentation/documentation/coremotion). Por ejemplo, para usar la estructura de SwiftUI, debes colocar la siguiente declaración al principio del archivo: 

```
import SwiftUI
```
</string>
				<key>Title</key>
				<string>importar</string>
			</dict>
		</dict>
		<key>increment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Incrementa un número por su valor entero, comúnmente 1.</string>
				<key>Title</key>
				<string>incremento</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un número que representa la posición de un elemento en un [arreglo](glossary://array).</string>
				<key>Title</key>
				<string>índice</string>
			</dict>
		</dict>
		<key>index out of range error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un error que ocurre al intentar acceder a un arreglo usando un índice que está fuera de los límites del arreglo. Por ejemplo, el índice `2` está fuera de los límites de este arreglo: `[17, 42]`.</string>
				<key>Title</key>
				<string>error de índice fuera de los límites</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El acto de crear una nueva instancia de un tipo, que incluye establecer los valores iniciales de cualquier propiedad del tipo.</string>
				<key>Title</key>
				<string>inicialización</string>
			</dict>
		</dict>
		<key>initializer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Puedes llamar a un inicializador para crear una nueva [instancia](glossary://instance) de un tipo. El inicializador debe asegurarse que las propiedades del tipo tengan todos los valores iniciales y, en ocasiones, contiene otro código de configuración.</string>
				<key>Title</key>
				<string>inicializador</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código que se repite (un ciclo) que está anidado dentro de otro ciclo (exterior).</string>
				<key>Title</key>
				<string>ciclo interior</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un valor de un [tipo](glossary://type) en particular. Por ejemplo, en `"let motion = MotionSensor()"`, `"motion"` es una instancia del tipo `"MotionSensor"`.</string>
				<key>Title</key>
				<string>instancia</string>
			</dict>
		</dict>
		<key>integer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un número entero, como `2` o `-5`.</string>
				<key>Title</key>
				<string>entero</string>
			</dict>
		</dict>
		<key>iterate</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Repetir un bloque de código por cada [elemento](glossary://element) de una [colección](glossary://collection), como un arreglo o un intervalo.

En el ejemplo de abajo, el ciclo for itera sobre el arreglo `days`, mostrando un día de la semana a la vez:
```
let days = ["Lunes", "Martes", "Miércoles"]

for value in days { 
	print(value)
}

// La primera iteración muestra "Lunes"
// La primera iteración muestra "Martes"
// La primera iteración muestra "Miércoles"
```</string>
				<key>Title</key>
				<string>iterar</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El acto de repetir un proceso, como realizar la misma acción en cada elemento de un arreglo.</string>
				<key>Title</key>
				<string>iteración</string>
			</dict>
		</dict>
		<key>label</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La representación visual de un elemento en la interfaz de usuario, creado como una [visualización](glossary://view).

Muchas [visualizaciones integradas](glossary://built-in%20view) de SwiftUI tienen tanto una etiqueta (una representación visual) como otros puntos de personalización, tales como una [visualización de destino](glossary://destination%20view) en el caso de `NavigationLink`, o una [devolución de llamada](glossary://callback) en el caso de `Button`.</string>
				<key>Title</key>
				<string>etiqueta</string>
			</dict>
		</dict>
		<key>lag</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una disminución en la velocidad o la capacidad de respuesta de la app como resultado de las demandas de procesamiento, la potencia de procesamiento o ambas.</string>
				<key>Title</key>
				<string>demora</string>
			</dict>
		</dict>
		<key>leading edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El borde inicial, cuando se usa en referencia al contenido que está dentro de una visualización, se refiere a la posición horizontal del inicio del contenido. La posición del borde inicial depende de tus preferencias y, por lo general, está basado en tu configuración de idioma y región.
                    Por ejemplo, para los idiomas que se leen de izquierda a derecha, como el español y el inglés, el borde inicial está a la izquierda; y para los idiomas que se leen de derecha a izquierda, como árabe o hebreo, el borde está a la derecha.</string>
				<key>Title</key>
				<string>borde inicial</string>
			</dict>
		</dict>
		<key>literal</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Los literales te otorgan la habilidad de incrustar imágenes o color directamente en el código usando la biblioteca de imágenes o el selector de color. Los literales son los valores reales de los datos representados en su formato nativo directamente dentro del editor.</string>
				<key>Title</key>
				<string>literal</string>
			</dict>
		</dict>
		<key>local scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un alcance local se forma en cada nuevo nivel de organización de código debajo del [alcance global](glossary://global%20scope). Por ejemplo, un nuevo [tipo](glossary://type) forma un nuevo alcance local, y los bloques de código y funciones dentro de ese tipo forman su propio nivel de [alcance](glossary://scope). Dependiendo de dónde se declare un símbolo, sólo se podrá acceder a este desde el código que está en el mismo nivel de alcance o en un nivel de alcance inferior.

Por ejemplo, si se define una variable dentro de un tipo, se puede acceder a esa variable en todas las funciones y bloques de código dentro del tipo. Sin embargo, si se define una constante dentro de un método, se puede acceder a esta sólo dentro de la definición del método.</string>
				<key>Title</key>
				<string>alcance local</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un símbolo (`&amp;&amp;`) que combina dos valores booleanos en donde ambos valores deben ser verdaderos para que el código en sí sea verdadero. Por ejemplo, `a &amp;&amp; b` sólo es verdadero cuando tanto `a` como `b` son `true`.</string>
				<key>Title</key>
				<string>operador lógico AND</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un símbolo (`!`) que invierte el valor booleano de una porción de código. Por ejemplo, si `a` es `true`, entonces `!a` es `false`.</string>
				<key>Title</key>
				<string>operador lógico NOT</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un símbolo (`||`) que combina dos valores booleanos en donde sólo un valor debe ser verdadero para que el código en sí sea verdadero. Por ejemplo, `a || b` es `true` cuando `a` o `b` sea `true` (o cuando ambos lo son).</string>
				<key>Title</key>
				<string>operador lógico OR</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un símbolo, como `&amp;&amp;`, `||` o `!`, que modifica o combina los valores lógicos booleanos `true` y `false`.</string>
				<key>Title</key>
				<string>operador lógico</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código que se repite un cierto número de veces (por ejemplo, un ciclo `for`) o hasta que se cumpla una condición (por ejemplo, un ciclo `while`).</string>
				<key>Title</key>
				<string>ciclo</string>
			</dict>
		</dict>
		<key>loop variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En un [ciclo for](glossary://for%20loop), el valor del elemento actual de la [colección](glossary://collection) sobre la que estás [iterando](glosssary://iterate).

Una variable de ciclo almacena este valor, lo que te permite usarlo en el cuerpo del ciclo `for`. 

En los siguientes ejemplo, `value` y `letter` son variables de ciclo:
```
for value in 1...4 { 
	print(value) // 1 2 3 4
}

for letter in ["c", "o", "d", "i", "g", "o"] { 
	print(letter) // c o d i g o 
}
```</string>
				<key>Title</key>
				<string>variable de ciclo</string>
			</dict>
		</dict>
		<key>lower bound</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En un [intervalo](glossary://range), el valor inicial desde el que se empieza a contar.

```
let closedRange = 1...5 // El límite inferior es 1; el límite superior es 5
for i in closedRange { 
	print(i) // 1 2 3 4 5
}
```</string>
				<key>Title</key>
				<string>límite inferior</string>
			</dict>
		</dict>
		<key>machine learning</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una rama de las ciencias computacionales que se dedica a desarrollar [algoritmos](glossary://algorithm) que usan grandes cantidades de datos para enseñar a las máquinas cómo aprender un proceso específico y mejorarlo. 

Un ejemplo sería enseñar a una máquina a reconocer un tipo de flor específico usando un [clasificador](glossary://classification) de imágenes y proporcionándole un gran conjunto de datos de imágenes de flores.</string>
				<key>Title</key>
				<string>aprendizaje automático</string>
			</dict>
		</dict>
		<key>machine learning model</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo de [modelo de datos](glossary://data%20model) que se crea aplicando un [algoritmo](glossary://algorithm) de aprendizaje automático a un [conjunto de datos de entrenamiento](glossary://training%20dataset). Los modelos de aprendizaje automático, también llamados modelos de ML (por sus siglas en inglés), se usan para hacer [predicciones](glossary://prediction) a partir de una fuente de entrada.</string>
				<key>Title</key>
				<string>modelo de aprendizaje automático</string>
			</dict>
		</dict>
		<key>magnitude</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El tamaño de un valor, independientemente de si es positivo o negativo. También se le conoce como el [valor absoluto](glossary://absolute%value) de un número. 

Por ejemplo, la magnitud de `5` y `-5` es `5` en ambos casos.</string>
				<key>Title</key>
				<string>magnitud</string>
			</dict>
		</dict>
		<key>memory</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La parte de una computadora que almacena el código de una aplicación y los datos que utiliza, ya sea de forma temporal o permanente.</string>
				<key>Title</key>
				<string>memoria</string>
			</dict>
		</dict>
		<key>metadata</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Información complementaria sobre los datos. Por ejemplo, una foto puede contener metadatos sobre el lugar donde se tomó.</string>
				<key>Title</key>
				<string>metadatos</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código con nombre que se ejecuta cuando [se le llama](glossary://call) mediante su nombre.

Un método es una [función](glossary://function) que se define dentro de un [tipo](glossary://type). 

Este código llama al método `moveForward()` desde una [instancia](glossary://instance) llamada `byte`:
```
let byte = Byte()

byte.moveForward()
```</string>
				<key>Title</key>
				<string>método</string>
			</dict>
		</dict>
		<key>miter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un estilo de conexión entre dos líneas trazadas en donde las esquinas son puntiagudas en lugar de redondeadas o biseladas.</string>
				<key>Title</key>
				<string>inglete</string>
			</dict>
		</dict>
		<key>modifier</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En SwiftUI, los modificadores se usan para personalizar el aspecto o el comportamiento de una visualización.

					En el código de abajo, el modificador `foregroundColor` (color de primer plano) cambia la visualización `Rectangle` a un color azul.
					```
					Rectangle()
							.foregroundColor(.blue)
					```

					Para que sea más fácil leer los modificadores, cada uno se coloca en una línea individual debajo de la visualización que modifica. En este ejemplo, el modificador `foregroundColor(.blue)` se aplica primero, seguido de `border(.green)`.
					```
					Rectangle()
							.foregroundColor(.blue)
							.border(.green)
					```
					
					Como los modificadores se aplican según el orden en el que se colocan, cambiar sus posiciones puede modificar el aspecto o comportamiento de la visualización resultante. 
				</string>
				<key>Title</key>
				<string>modificador</string>
			</dict>
		</dict>
		<key>modularity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El principio de separar tu app en piezas independientes, cada una de las cuales contiene todo lo que requiere para llevar a cabo su parte de la funcionalidad de la app, como mostrar una porción de la interfaz o almacenar los datos de la app.

La modularidad es un principio importante en la creación de apps porque permite entender y trabajar mejor con piezas individuales de funcionalidad, lo que permite a su vez detectar más fácilmente la ubicación de un fallo en caso de que la app presente un error.</string>
				<key>Title</key>
				<string>modular</string>
			</dict>
		</dict>
		<key>module</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una sola unidad de distribución de código; es decir, una [estructura](glossary://framework) o aplicación creada y proporcionada como una sola unidad que otro módulo puede importar mediante el comando de [importación](glossary://import) de Swift.</string>
				<key>Title</key>
				<string>módulo</string>
			</dict>
		</dict>
		<key>modulo operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un símbolo (`%`) que devuelve el valor que queda después de dividir un número entre otro. Por ejemplo, `17 % 5` devuelve `2`.</string>
				<key>Title</key>
				<string>operador de módulo</string>
			</dict>
		</dict>
		<key>navigation bar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una interfaz de navegación te permite seleccionar una opción en cada pantalla hasta llegar a un destino. Para llegar a un destino distinto, debes regresar o volver a empezar desde el principio para seleccionar opciones distintas. La barra de navegación de la parte superior de la pantalla muestra un título que te ayuda a recordar dónde te encuentras, y ofrece un botón para regresar a la pantalla anterior.</string>
				<key>Title</key>
				<string>barra de navegación</string>
			</dict>
		</dict>
		<key>navigation link</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una [visualización integrada](glossary://built-in%20view) de SwiftUI que navega a una [visualización de destino](glossary://destination%20view) cuando un usuario la toca. Un enlace de navegación también tiene una [etiqueta](glossary://label) que determina su aspecto.</string>
				<key>Title</key>
				<string>enlace de navegación</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Colocar un bloque de código que se repite (un ciclo) dentro de otro.</string>
				<key>Title</key>
				<string>anidar</string>
			</dict>
		</dict>
		<key>normalization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El proceso de ajustar la escala de un conjunto de datos para que los valores resultantes estén entre `0` y `1`.</string>
				<key>Title</key>
				<string>normalización</string>
			</dict>
		</dict>
		<key>observable object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Cuando una clase [cumple](glossary://conform) con el protocolo `ObservableObject`, cualquier cambio que se realice a sus valores publicados ocasionará que todas las visualizaciones que utilicen esos valores se actualicen de forma automática para reflejar los cambios.</string>
				<key>Title</key>
				<string>objeto observable</string>
			</dict>
		</dict>
		<key>observe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Monitorear un objeto para detectar un [cambio en su estado](glossary://state%20change).</string>
				<key>Title</key>
				<string>observar</string>
			</dict>
		</dict>
		<key>observed object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Dentro de una [visualización](glossary://view), SwiftUI supervisa los cambios en cualquier [propiedad](glossary://property) que use el [contenedor de propiedades](glossary://property%20wrapper) `@ObservedObject`. Si su valor cambia, SwiftUI actualiza la visualización.

El tipo de una propiedad de objeto observado debe [cumplir](glossary://conform) con el protocolo `ObservableObject`.
				</string>
				<key>Title</key>
				<string>objeto observado</string>
			</dict>
		</dict>
		<key>observer</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Con respecto a un [objeto observable](glossary://observable%20object), un observador es cualquier visualización u objeto que usa los datos del objeto observable. Cuando los datos del objeto observable cambian, SwiftUI reconoce el cambio y le indica a los observadores que se deben actualizar.</string>
				<key>Title</key>
				<string>observador</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un símbolo, como `+`, `-` o `&amp;&amp;`, que representa una acción que se realiza en uno o más valores. Por ejemplo, en `1 + 2`, el operador de adición (`+`) suma los números `1` y `2`.</string>
				<key>Title</key>
				<string>operador</string>
			</dict>
		</dict>
		<key>optional</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un tipo que representa ya sea un valor envuelto o ningún valor. Un tipo opcional se suele indicar con un signo de interrogación al final (`?`).
				
Por ejemplo, una variable del tipo `Int?` puede contener un valor `Int` envuelto de `-43` o `6`, o su valor puede ser `nil`, en cuyo caso no tiene un valor asignado.</string>
				<key>Title</key>
				<string>opcional</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código que se repite (un ciclo) que contiene otro ciclo (interior).</string>
				<key>Title</key>
				<string>ciclo exterior</string>
			</dict>
		</dict>
		<key>overfitting</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En el ámbito del aprendizaje automático, es la producción de un modelo que corresponde con mucha precisión a un conjunto de datos particular.

Por ejemplo, si tu modelo es un [clasificador](glossary://classification) que detecta imágenes de mamíferos y el [conjunto de datos de entrenamiento](glossary://training%20dataset) solamente incluye imágenes de perros, el modelo estará sobreajustado para reconocer perros, a costa de ignorar otros mamíferos, como conejos o venados.</string>
				<key>Title</key>
				<string>sobreajuste</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un valor que se usa para personalizar el comportamiento de una [función](glossary://function). Cuando [llamas](glossary://call) a una función, puedes pasar distintos valores para cambiar su funcionamiento.

En la función de abajo, `distance` es un parámetro que acepta un valor del tipo `Int`:
```
func move(distance: Int) { 
	for i in 1...distance { 
		moveForward()
	}
}
```
Para modificar el comportamiento de una función, puedes agregar en su cuerpo el valor del parámetro (`distance`). En este caso, puedes llamar a esta función con distintos valores enteros, como `move(distance: 2)` o `move(distance: 5)` para que la distancia que se recorre sea distinta.</string>
				<key>Title</key>
				<string>parámetro</string>
			</dict>
		</dict>
		<key>pass in</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Proporcionar un valor a uno de los [parámetros](glossary://parameter) de una función. 

En el ejemplo de abajo, el código pasa el valor "Hola" al parámetro `text`.
```
speak(text: "Hola")
```</string>
				<key>Title</key>
				<string>pasar</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un conjunto de circunstancias o datos que se repite.</string>
				<key>Title</key>
				<string>patrón</string>
			</dict>
		</dict>
		<key>persistence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El proceso de almacenar los datos de usuario para que puedan volver a cargarse cada vez que se inicie la app. Sin persistencia, el estado y los datos de tu app se restablecerán cada vez que se reinicie.</string>
				<key>Title</key>
				<string>persistencia</string>
			</dict>
		</dict>
		<key>pi</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Pi (π) es una constante matemática que equivale aproximadamente a 3.14. Es la relación entre la circunferencia de un círculo y su diámetro.</string>
				<key>Title</key>
				<string>pi</string>
			</dict>
		</dict>
		<key>pitch</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La medida de la rotación o inclinación de un dispositivo hacia la derecha e izquierda cuando el dispositivo está en orientación horizontal.  Matemáticamente, la elevación es la rotación alrededor del eje “x” del dispositivo. Se mide en radianes y tiene un rango de `-π/2` a `π/2`.</string>
				<key>Title</key>
				<string>elevación</string>
			</dict>
		</dict>
		<key>pitch audio</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El tono de un sonido depende de la frecuencia de la vibración de las ondas sonoras; mientras más ondas sonoras se produzcan durante un periodo de tiempo específico, más alto será el tono. 

					En música, el tono describe si una nota suena “alta” o “baja”. Por ejemplo, el canto de un pájaro registra un tono alto, mientras que el rugido de un león crea un sonido de tono bajo.</string>
				<key>Title</key>
				<string>tono</string>
			</dict>
		</dict>
		<key>placeholder view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Visualización que se muestra temporalmente para indicar dónde se cargará o ingresará el contenido final. Un ejemplo es la visualización `ProgressView` usada para mostrar una imagen de carga, o un rectángulo gris donde se puede ingresar texto.</string>
				<key>Title</key>
				<string>visualización de marcador de posición</string>
			</dict>
		</dict>
		<key>prediction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En el ámbito del aprendizaje automático, una predicción es el resultado producido por un modelo de aprendizaje automático cuando se le proporciona una entrada.

Por ejemplo, “golden retriever” podría ser una predicción válida realizada por un modelo de aprendizaje automático entrenado para reconocer distintas razas de perro.</string>
				<key>Title</key>
				<string>predicción</string>
			</dict>
		</dict>
		<key>private</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La palabra clave `private` hace que el código sólo esté disponible en ese archivo fuente específico.
- callout(Ejemplo):
`private class MyApp: App { }`</string>
				<key>Title</key>
				<string>private</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una variable (un contenedor con nombre que almacena un valor) definida dentro de un [tipo](glossary://type).

Puedes acceder a una propiedad mediante una [instancia](glossary://instance) del tipo usando [notación de puntos](glossary://dot%20notation). En el código de abajo, `isFacingHole` es una propiedad del tipo `Hopper`.
```
if hopper.isFacingHole { 
	// código 
}
```</string>
				<key>Title</key>
				<string>propiedad</string>
			</dict>
		</dict>
		<key>property wrapper</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un contenedor de propiedades ofrece una forma sencilla de aplicar un patrón de comportamiento común a una propiedad. Este contenedor constituye una forma de anotar la propiedad que define cómo se almacenará o calculará al leerse.   Por ejemplo, el contenedor de propiedades `@State` le indica a SwiftUI que debe administrar el almacenamiento de un valor, y cada vez que el valor cambie, debe actualizar cualquier parte de la visualización que lo utilice.</string>
				<key>Title</key>
				<string>contenedor de propiedades</string>
			</dict>
		</dict>
		<key>protocol</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un conjunto de requisitos, como métodos y propiedades, que puede adoptar (o seguir) un tipo, tal como una clase, estructura o enumeración.  Cuando un tipo adopta un protocolo, el tipo proporciona su propia implementación de los requisitos del protocolo, y se dice que cumple con dicho protocolo.</string>
				<key>Title</key>
				<string>protocolo</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una descripción fácil de leer de un algoritmo, usualmente escrita usando una mezcla de código y lenguaje normal.</string>
				<key>Title</key>
				<string>pseudocódigo</string>
			</dict>
		</dict>
		<key>public</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La palabra clave `public` hace que el código esté disponible en cualquier archivo de tu proyecto.
                        
- callout(Ejemplo):
`public func decorateWithSticker(space: Space) { }`
                    </string>
				<key>Title</key>
				<string>public</string>
			</dict>
		</dict>
		<key>publish</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El proceso de transmitir una notificación a todos los [observadores](glossary://observer) de un [objeto observable](glossary://observable%20object) cuando cambia el valor de una [propiedad publicada](glossary://published%20value) específica.</string>
				<key>Title</key>
				<string>publicar</string>
			</dict>
		</dict>
		<key>published value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Agrega el [contenedor de propiedades](glossary://property%20wrapper) `@Published` para declarar una propiedad que notifique a todos los [observadores](glossary://observer) cuando su valor esté por cambiar. Cuando el valor cambie, SwiftUI actualiza todas las visualizaciones que utilicen sus datos.</string>
				<key>Title</key>
				<string>valor publicado</string>
			</dict>
		</dict>
		<key>radians</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Los radianes son una unidad de medida para los ángulos, como los grados. El ángulo en radianes es igual a la razón de la longitud del arco y el radio de un círculo dibujado alrededor de ese ángulo. Un radián es igual a 180 grados dividido por [pi](glossary://pi).</string>
				<key>Title</key>
				<string>radianes</string>
			</dict>
		</dict>
		<key>range</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Los valores intermedios entre un [límite inferior](glossary://lower%20bound) y un [límite superior](glossary://upper%20bound). 

Hay varias formas de crear un intervalo, incluido un [intervalo cerrado](glossary://closed%20range) y un [intervalo medio abierto](glossary://half%20open%20range).

```
let closedRange = 1...4 
for i in closedRange { 
	print(i) // 1 2 3 4
}

let halfOpenRange = 1..&lt;4 
for i in halfOpenRange { 
	print(i) // 1 2 3
}
```</string>
				<key>Title</key>
				<string>intervalo</string>
			</dict>
		</dict>
		<key>reference type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Al crear una [instancia](glossary://instance) de un tipo de referencia, como una clase o actor , sus datos se almacenan en la memoria compartida. Como resultado, la instancia solamente contiene una referencia a los datos, en lugar de su propia copia de estos. Si [asignas](glossary://assignment) la instancia a una variable, o la pasas como el [argumento](glossary://argument) de una función, Swift crea otra referencia a los mismos datos.

La instancia se copia mediante la referencia, como se muestra en el ejemplo de abajo:

```
class Bicycle {
  var color: Color
   init(color: Color) {
     self.color = color
   }
}

var redBike = Bicycle(color: .red)
var blueBike = redBike
blueBike.color = .blue
print(redBike.color) // =&gt; blue
print(blueBike.color) // =&gt; blue
// redBike y blueBike comparten una referencia a los mismos datos
```</string>
				<key>Title</key>
				<string>tipo de referencia</string>
			</dict>
		</dict>
		<key>responsive</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Tu código o interfaz de usuario es receptivo si reacciona rápidamente a la [interacción del usuario](glossary://user%20interaction), o se adapta adecuadamente a los cambios en su entorno, como el cambio de tamaño de la visualización.</string>
				<key>Title</key>
				<string>receptivo</string>
			</dict>
		</dict>
		<key>return</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Devolver un valor al parámetro que llama a una [función](glossary://function). Por ejemplo, cuando se ejecuta la función `contains(3)` en el arreglo `[0,1,2]`, se devuelve un valor booleano `false`, ya que este arreglo no contiene el valor `3`.</string>
				<key>Title</key>
				<string>devolver</string>
			</dict>
		</dict>
		<key>return type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Cuando defines una función, puedes definir de forma opcional un tipo de valor que la función devuelva como salida cuando haya terminado; a esto se le conoce como tipo de retorno.</string>
				<key>Title</key>
				<string>tipo de retorno</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una característica del código que permite que se use en distintas situaciones dentro de una aplicación.</string>
				<key>Title</key>
				<string>reusabilidad</string>
			</dict>
		</dict>
		<key>roll</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La medida de la rotación o inclinación de un dispositivo hacia adelante o atrás cuando el dispositivo está en orientación horizontal.  Matemáticamente, esta es la rotación alrededor del eje “y” del dispositivo. Se mide en radianes y tiene un rango de `-π` a `π`.</string>
				<key>Title</key>
				<string>rotación lateral</string>
			</dict>
		</dict>
		<key>root view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una visualización en la que se colocan todas las otras visualizaciones. Se le conoce también como [visualización principal](glossary://top-level%20view), y está en la parte superior de la [jerarquía de visualizaciones](glossary://view%20hierarchy). Además, funge como la [visualización de contenedor](glossary://container) de todas las [subvisualizaciones](glossary://subview) de la jerarquía.</string>
				<key>Title</key>
				<string>visualización raíz</string>
			</dict>
		</dict>
		<key>rubber ducky method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Método de aprendizaje en el que explicas un concepto con gran detalle a un objeto inanimado, como un patito de hule. Para realizar esta técnica, obtén un objeto inanimado y empieza a explicar el concepto en voz alta, asegurándote de incluir toda la información necesaria para que el patito lo entienda. Durante tu explicación, si te das cuenta de que te falta información, toma nota para investigarla después. Puedes incluir tus nuevos hallazgos en las siguientes explicaciones al patito de hule.</string>
				<key>Title</key>
				<string>método del patito de hule</string>
			</dict>
		</dict>
		<key>saturation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La intensidad del matiz, de un tono gris a un color vívido. Los datos de saturación deben ser un valor `Double` (número decimal) del `0` al `1`.</string>
				<key>Title</key>
				<string>saturación</string>
			</dict>
		</dict>
		<key>scope</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Las áreas de tu proyecto desde las que puedes acceder a un valor o tipo. Mientras que los símbolos definidos en un [alcance global](glossary://global%20scope) pueden ser accedidos por cualquier archivo del primer [módulo](glossary://module), los definidos en un [alcance local](glossary://local%20scope) están disponibles en el código que se encuentra en el mismo nivel de alcance local o en uno inferior.</string>
				<key>Title</key>
				<string>alcance</string>
			</dict>
		</dict>
		<key>sensor</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un sensor es un dispositivo que detecta eventos, como un cambio en el calor, la luz, el sonido o el movimiento, y devuelve un valor.</string>
				<key>Title</key>
				<string>sensor</string>
			</dict>
		</dict>
		<key>sequence</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una lista de valores que puedes recorrer uno a la vez utilizando la [iteración](glossary://iteration).

Puedes usar un ciclo `for`-`in` para iterar sobre una secuencia de elementos, como los del arreglo `healthySnacks` en el siguiente ejemplo:
```
let healthySnacks = ["manzana", "pera", "plátano"]
for snack in healthySnacks {
	eat(snack)
}
```</string>
				<key>Title</key>
				<string>secuencia</string>
			</dict>
		</dict>
		<key>source of truth</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En el ámbito de la creación de apps, se trata de una ubicación única en donde se modifican todos los datos. Todas las demás conexiones a estos datos se hacen solamente mediante referencia, lo que evita la duplicación de su información en otras ubicaciones.</string>
				<key>Title</key>
				<string>fuente única de información</string>
			</dict>
		</dict>
		<key>speech synthesis</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Generación computarizada de sonido que se asemeja al habla humana, comúnmente generada a partir de texto.</string>
				<key>Title</key>
				<string>síntesis del habla</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Información almacenada en una variable, app o sistema en un momento dado. Por ejemplo, si una variable `level` contiene un valor de `4`, entonces su valor actual es `4`.</string>
				<key>Title</key>
				<string>estado</string>
			</dict>
		</dict>
		<key>state change</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Cambio en la información almacenada en una variable, app o sistema. Por ejemplo, si el valor de la variable `level` cambia de `4` a `5`, entonces su estado también cambia.</string>
				<key>Title</key>
				<string>cambio de estado</string>
			</dict>
		</dict>
		<key>state object</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Agrega el [contenedor de propiedades](glossary://property%20wrapper) `@StateObject` para declarar un objeto de estado y proporcionar un valor inicial que cumpla con el [protocolo](glossary://protocol) `ObservableObject`. SwiftUI administra el almacenamiento del objeto de estado, y actualiza las subvisualizaciones que usen el valor cada vez que cambien sus valores publicados.</string>
				<key>Title</key>
				<string>objeto de estado</string>
			</dict>
		</dict>
		<key>state property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Agrega `@State` antes de una [propiedad](glossary://property) de una visualización para indicarle a SwiftUI que administre el almacenamiento de un valor. Cuando el valor cambie, SwiftUI actualizará cualquier parte de la visualización que lo use.

```
@State var isOn = false
```
</string>
				<key>Title</key>
				<string>propiedad de estado</string>
			</dict>
		</dict>
		<key>state value</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Agrega `@State` antes de una variable para indicarle a SwiftUI que administre el almacenamiento de un valor. Cuando el valor cambie, SwiftUI actualizará cualquier parte de la visualización que lo use.</string>
				<key>Title</key>
				<string>valor de estado</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una estructura, como un ciclo o un enunciado `if`, que organiza código en una aplicación.</string>
				<key>Title</key>
				<string>enunciado</string>
			</dict>
		</dict>
		<key>string component</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una parte, o substring, de un string después de que el string se haya dividido en partes usando un separador. Por ejemplo, si el string `"dog+cat+fish"` está dividido por el separador `"+"`, los componentes resultantes serían los strings `"dog"`, `"cat"` y `"fish"`.</string>
				<key>Title</key>
				<string>componente de string</string>
			</dict>
		</dict>
		<key>string concatenation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La operación de conectar strings al agregar uno al final de otro. Por ejemplo, la concatenación `"foot"` y `"ball"` es `"football"`.</string>
				<key>Title</key>
				<string>concatenación de strings</string>
			</dict>
		</dict>
		<key>string interpolation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El uso de constantes, variables o expresiones de código dentro de un string más largo que se sustituyen con sus valores actuales cuando se evalúa el string. Por ejemplo, en el string `"Katy se comió un \(fruit)"`, si `fruit` es una variable con el valor `"durazno"`, entonces `"durazno"` reemplaza a `\(fruit)` cuando el string se evalúa, por lo que se convierte en `"Katy se comió un durazno"`.</string>
				<key>Title</key>
				<string>interpolación de strings</string>
			</dict>
		</dict>
		<key>structure</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una estructura es un contenedor de código que actúa como un plano para hacer varias [instancias](glossary://instance) del mismo tipo de elemento. De la misma manera que un plano puede definir las funciones y los comportamientos de un objeto, como una bicicleta, una estructura los define como sus [propiedades](glossary://property) y [métodos](glossary://method).

Al crear una instancia de la estructura, esta contiene todas las propiedades y métodos definidos en el plano. Aunque cada instancia comparte las mismas propiedades y métodos, puedes modificar los valores de sus propiedades de forma independiente, lo que permite personalizar cada instancia que se cree a partir de la estructura. Por ejemplo, una estructura de bicicleta puede tener una propiedad de color, lo que te permite crear tanto bicicletas rojas como azules.

Una estructura es similar a una [clase](glossary://class), pero difiere en dos cosas: primero, una estructura es un [tipo de valor](glossary://reference%20type), es decir que siempre se copia mediante un valor, y segundo, una estructura no admite heredar nada de otra clase.

```
struct Bicycle { 
	var color : Color 
	var type : BikeCategory
}
```</string>
				<key>Title</key>
				<string>estructura</string>
			</dict>
		</dict>
		<key>subview</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una visualización que está dentro de una visualización de [contenedor](glossary://container). Un contenedor puede tener muchas subvisualizaciones, cada una de las cuales puede contener sus propias subvisualizaciones. Una visualización y todas sus descendientes forman una [jerarquía de visualizaciones](glossary://view%20hierarchy).</string>
				<key>Title</key>
				<string>subvisualización</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Las reglas para escribir código que una computadora pueda entender y ejecutar.</string>
				<key>Title</key>
				<string>sintaxis</string>
			</dict>
		</dict>
		<key>task</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Las tareas son útiles para manejar unidades de trabajo discretas en la app para que el código pueda seguir encargándose de cosas importantes como la interfaz de usuario. Al crear una tarea, su código se ejecuta de forma [asincrónica](glossary://asynchronous%20process) como parte del programa, lo que permite que el resto del código se dedique a otras cosas. Las partes del código que requieran datos de esta tarea pueden esperar (`await`) sus resultados.</string>
				<key>Title</key>
				<string>tarea</string>
			</dict>
		</dict>
		<key>ternary conditional operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Forma abreviada especial de escribir una declaración condicional. El [operador](glossary://operator) cuenta con tres partes y se expresa como `condition ? trueValue : falseValue`. Es como si un [enunciado `if`](glossary://if%20statement) devolviera `trueValue` si `condition` es `true`, y `falseValue` si es `false`. 

En el código de abajo, si `isOn` es `true`, el rectángulo será verde; si es `false`, el rectángulo será rojo.

```
Rectangle()
     .foregroundColor(isOn ? .green : .red)
```

El código anterior puede leerse de la siguiente manera: si el valor de `isOn` es `true`, devuelve el valor `.green`, si no, devuelve el valor `.red`.
</string>
				<key>Title</key>
				<string>operador condicional ternario</string>
			</dict>
		</dict>
		<key>toolbar</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Tira de íconos utilizada para realizar algunas funciones. El modificador de barra de herramientas (toolbar) espera una colección de elementos de barra de herramientas que puedes proporcionar agregando una colección de visualizaciones.</string>
				<key>Title</key>
				<string>barra de herramientas</string>
			</dict>
		</dict>
		<key>top-level view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una visualización en la que se colocan todas las otras visualizaciones. Se le conoce también como [visualización raíz](glossary://root%20view), y está en la parte superior de la [jerarquía de visualizaciones](glossary://view%20hierarchy). Además, funge como la [visualización de contenedor](glossary://container) de todas las [subvisualizaciones](glossary://subview) de la jerarquía.</string>
				<key>Title</key>
				<string>visualización principal</string>
			</dict>
		</dict>
		<key>trailing edge</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El borde final, cuando se usa en referencia al contenido que está dentro de una visualización, se refiere a la posición horizontal del final del contenido. La posición del borde final depende de tus preferencias y, por lo general, está basado en tu configuración de idioma y región.
                    Por ejemplo, para los idiomas que se leen de izquierda a derecha, como el español y el inglés, el borde final está a la derecha; y para los idiomas que se leen de derecha a izquierda, como árabe o hebreo, el borde está a la izquierda.</string>
				<key>Title</key>
				<string>borde final</string>
			</dict>
		</dict>
		<key>training</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En el ámbito del aprendizaje automático, es un proceso mediante el cual un algoritmo de aprendizaje toma un conjunto de datos y aprende de su contenido.

En el aprendizaje supervisado, el modelo intenta crear la relación matemática más precisa entre las características de los datos y su etiqueta. Mientras que en el aprendizaje no supervisado, el modelo intenta encontrar la relación entre las propias características de los datos.</string>
				<key>Title</key>
				<string>entrenamiento</string>
			</dict>
		</dict>
		<key>training dataset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La colección de datos con los que un modelo de aprendizaje automático se [entrena](glossary://training) para generar sus [predicciones](glossary://prediction).</string>
				<key>Title</key>
				<string>conjunto de datos de entrenamiento</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una agrupación con nombre de propiedades (las características) y métodos (los comportamientos) de una clase de datos.

Los tipos ofrecen una forma de crear un conjunto de funcionalidades relacionadas para que sea más fácil acceder a ellas.

```
struct Person { 
	var name : Int
	var age : String 

	func greet() { 
		print("Hola, amigos")
	}
}
```</string>
				<key>Title</key>
				<string>tipo</string>
			</dict>
		</dict>
		<key>typography</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El arte y la técnica de disponer los caracteres de tal forma que el lenguaje escrito sea legible y atractivo cuando se muestra.</string>
				<key>Title</key>
				<string>tipografía</string>
			</dict>
		</dict>
		<key>unwrap</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El proceso de extraer el valor envuelto de una [instancia](glossary://instance) de un tipo [opcional](glossary://optional). 
				
Una manera común de desenvolver el valor de un tipo opcional es usar `if`-`let`:
```
var count: Int? = 48
if let unwrappedCount = count {
	print(unwrappedCount)
} else {
	print("count has no value")
}
```</string>
				<key>Title</key>
				<string>desenvolver</string>
			</dict>
		</dict>
		<key>upper bound</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>En un [intervalo](glossary://range%20value), el valor final hasta el que se cuenta.

```
let closedRange = 1...5 // El límite inferior es 1; el límite superior es 5
for i in closedRange { 
	print(i) // 1 2 3 4 5
}
```</string>
				<key>Title</key>
				<string>límite superior</string>
			</dict>
		</dict>
		<key>user</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Persona que usa tu app.</string>
				<key>Title</key>
				<string>usuario</string>
			</dict>
		</dict>
		<key>user input</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Información que una aplicación obtiene mediante la interacción con un usuario, por ejemplo, tocar la pantalla, ingresar texto con el teclado o hablar a través del micrófono. 
</string>
				<key>Title</key>
				<string>entrada del usuario</string>
			</dict>
		</dict>
		<key>user interaction</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Acción realizada por un [usuario](glossary://user) de tu app. Tocar un botón, deslizar hacia la izquierda sobre la pantalla, girar el dispositivo, elegir un color en un `ColorPicker` (selector de color) y escribir caracteres en un campo de texto son ejemplos de interacción del usuario.</string>
				<key>Title</key>
				<string>interacción del usuario</string>
			</dict>
		</dict>
		<key>user interface</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El medio por el cual un usuario controla una app. También se le llama UI (por sus siglas en inglés), y es un término que se suele usar para referirse a la parte visual de una app con la que los usuarios interactúan, con elementos tales como imágenes, texto, botones, reguladores, visualizaciones de desplazamiento y más.</string>
				<key>Title</key>
				<string>interfaz de usuario</string>
			</dict>
		</dict>
		<key>validation dataset</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una muestra de datos que se retiene del [conjunto de datos de entrenamiento](glossary://training%20dataset) de tu modelo de aprendizaje automático. El modelo utiliza el conjunto de datos de validación para evaluar la precisión de las predicciones.</string>
				<key>Title</key>
				<string>conjunto de datos de validación</string>
			</dict>
		</dict>
		<key>value type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Al crear una [instancia](glossary://instance) de un tipo de valor, como una [estructura](glossary://structure), sus datos se almacenan en la instancia misma. Si [asignas](glossary://assignment) la instancia a una variable, o la pasas como el [argumento](glossary://argument) de una función, Swift crea una instancia nueva con una copia independiente de los datos.

La instancia se copia mediante el valor, como se muestra en el ejemplo de abajo:

```
struct Bicycle {
  var color: Color
}

var redBike = Bicycle(color: .red)
var blueBike = redBike
blueBike.color = .blue
print(redBike.color) // =&gt; red
print(blueBike.color) // =&gt; blue
// redBike y blueBike tienen su propia copia de los datos
```</string>
				<key>Title</key>
				<string>tipo de valor</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un contenedor con nombre que almacena un valor que se puede cambiar.

Una variable puede almacenar distintos [tipos](glossary://type) de valores, como [enteros](glossary://Int), [strings](glossary://String) e [intervalos](glossary://range).  
```
var favoriteNumber = 7 // Almacena un entero
var greeting = "Hello" // Almacena un string
var repetitions = 1...5 // Almacena un intervalo
```
</string>
				<key>Title</key>
				<string>variable</string>
			</dict>
		</dict>
		<key>velocity</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La velocidad de un objeto en una dirección específica.</string>
				<key>Title</key>
				<string>velocidad</string>
			</dict>
		</dict>
		<key>view</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una visualización es el bloque de construcción de la interfaz de usuario de tu app, y representa cualquier elemento visual que [cumple](glossary://conform) con el [protocolo](glossary://protocol) `View`.

Algunos ejemplos de visualizaciones en SwiftUI incluyen visualizaciones de texto o de imagen, reguladores, cuadrículas, botones y figuras.</string>
				<key>Title</key>
				<string>visualización</string>
			</dict>
		</dict>
		<key>view hierarchy</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Una estructura que define la disposición de las visualizaciones en relación con otras visualizaciones, haciendo referencia a una instancia de visualización principal que está en la parte superior de la jerarquía. La visualización principal puede contener muchas subvisualizaciones, cada una de las cuales puede contener sus propias subvisualizaciones, y así sucesivamente.</string>
				<key>Title</key>
				<string>jerarquía de visualizaciones</string>
			</dict>
		</dict>
		<key>volume</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>El volumen es la intensidad del sonido detectado por el [sensor](glossary://sensor). Oscila entre 0 y 1.</string>
				<key>Title</key>
				<string>volumen</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bloque de código que se ejecuta mientras una condición dada sea verdadera. Cuando la condición se vuelva falsa, el ciclo dejará de ejecutarse.</string>
				<key>Title</key>
				<string>ciclo while</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Un bosquejo de un elemento, como una gema, interruptor o bloque, que está en el mundo del rompecabezas. Un esquema de página se usa para indicar la posibilidad de que el elemento pudiera aparecer de forma aleatoria cada vez que se ejecute el rompecabezas.</string>
				<key>Title</key>
				<string>esquema de página</string>
			</dict>
		</dict>
		<key>yaw</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>La medida de la rotación alrededor del punto central de un dispositivo cuando se encuentra sobre una superficie plana.  Matemáticamente, esta es la rotación alrededor del eje “z” del dispositivo. Se mide en radianes y tiene un rango de `-π` a `π`.</string>
				<key>Title</key>
				<string>rotación intrínseca</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
